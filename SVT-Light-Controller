[{"id":"17235fd954b8a4ef","type":"subflow","name":"SVT Light Controller","info":"","category":"","in":[{"x":380,"y":320,"wires":[{"id":"039448d1d9ec0ad3"}]}],"out":[{"x":2420,"y":180,"wires":[{"id":"4b73dbb4c765e672","port":0},{"id":"1b17ec13b98b0151","port":0}]}],"env":[{"name":"Name","type":"str","value":"Light"}],"meta":{},"color":"#DDAA99","status":{"x":1510,"y":320,"wires":[]}},{"id":"16c37db5d29c4ff1","type":"file in","z":"17235fd954b8a4ef","g":"816983ea99944998","name":"","filename":"/homeassistant/lights.yaml","filenameType":"str","format":"utf8","chunk":false,"sendError":false,"encoding":"none","allProps":false,"x":1020,"y":60,"wires":[["c2d7605cc605ceb7"]]},{"id":"948fd28cb64bab42","type":"function","z":"17235fd954b8a4ef","g":"816983ea99944998","name":"find the virtual entity in lights.yaml","func":"// Get the YAML data from the message payload\n  const yamlData = msg.payload;\n  let entityName = env.get(\"Name\");\n  // Check if parsing was successful\n  if (!yamlData) {\n    node.error(\"Error reading YAML file\");\n    node.done();\n    return;\n  }\n  \n  // Find the specific platform and name\n  let foundEntry = null;\n  for (const key in yamlData) {\n    const entry = yamlData[key];\n    if (entry.platform && entry.name && \n        entry.platform === \"virtual\" && \n        entry.name === entityName) {\n      foundEntry = entry;\n      break; // Exit loop if found\n    }\n  }\n  \n  // Check if entry was found\n  if (foundEntry) {\n    // Send the found entry as the message payload\n    msg.payload = foundEntry;\n    node.send(msg);\n    node.done();\n    //node.warn(\"Virtual entity found, proceed\");\n  } else {\n    // Entry not found, create and add \"test_virtual\" entry\n    foundEntry = {\n      platform: \"virtual\",\n      name: entityName,\n      support_brightness: true,\n      support_color: true,\n      support_color_temp: true,\n      support_white_value: true\n    };\n    const formattedEntry = \"\\n\" + \n                        \"- platform: \" + foundEntry.platform + \"\\n\" +\n                        \"  name: \" + foundEntry.name + \"\\n\" +\n                        \"  support_brightness: \" + foundEntry.support_brightness + \"\\n\" +\n                        \"  support_color: \" + foundEntry.support_color + \"\\n\" +\n                        \"  support_color_temp: \" + foundEntry.support_color_temp + \"\\n\" +\n                        \"  support_white_value: \" + foundEntry.support_white_value + \"\\n\";\n    // Update the original YAML data (optional)\n    // You might need additional logic here depending on your use case.\n    // yamlData[ /* key for new entry */ ] = foundEntry;\n    \n    // Send the created entry as the message payload\n    let msg2 = { payload: formattedEntry };\n    node.send([msg,msg2]);\n    node.done();\n    //node.warn(\"Virtual entity not found, adding Virtual Entity\");\n  }\n  // Return the original message (optional)\n  //return msg;","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1480,"y":60,"wires":[[],["1b624417d7ead72f"]]},{"id":"c2d7605cc605ceb7","type":"yaml","z":"17235fd954b8a4ef","g":"816983ea99944998","property":"payload","name":"","x":1230,"y":60,"wires":[["948fd28cb64bab42"]]},{"id":"1b624417d7ead72f","type":"file","z":"17235fd954b8a4ef","g":"816983ea99944998","name":"","filename":"/homeassistant/lights.yaml","filenameType":"str","appendNewline":true,"createDir":false,"overwriteFile":"false","encoding":"none","x":1800,"y":60,"wires":[[]]},{"id":"6ca2fff3c007978e","type":"inject","z":"17235fd954b8a4ef","g":"816983ea99944998","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":"1","topic":"","payload":"","payloadType":"date","x":770,"y":60,"wires":[["16c37db5d29c4ff1"]]},{"id":"3f3e2e65abba99e5","type":"function","z":"17235fd954b8a4ef","g":"9f91a26760260398","name":"Store Entity Ids and states","func":"\n// Check if the message has data and an entity_id property\n  if (msg.data && msg.data.entity_id) {\n    // Get the entity ID from the message\n    const entityId = msg.data.entity_id;\n    \n    // Get the existing flow variable (or create an empty object if it doesn't exist)\n    let entityMessages = flow.get(\"entityMessages\") || {};\n    \n    // Check if the entity ID exists in the object\n    if (entityMessages[entityId]) {\n      // Find the existing message to update (if any)\n      const existingMessageIndex = entityMessages[entityId].findIndex(message => message.entity_id === entityId);\n      \n      if (existingMessageIndex !== -1) {\n        // Update the existing message with the new data\n        entityMessages[entityId][existingMessageIndex] = msg.data;\n      } else {\n        // No existing message found, create a new entry\n        entityMessages[entityId].push(msg.data);\n\n        msg = {};\n        msg.payload = \"New Entity \" + msg.data.entity_id + \" Saved\"\n        node.send(msg);\n        node.done();\n      }\n    } else {\n      // Create a new array for the entity ID\n      entityMessages[entityId] = [msg.data];\n    }\n    \n    // Set the updated flow variable\n    flow.set(\"entityMessages\", entityMessages);\n    \n  } else {\n    // Handle the case where entity_id is missing\n    //node.error(\"Missing entity_id in message data\");\n  }\n  \n  // Return the original message (optional)\n  \n  return msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":870,"y":480,"wires":[["53db8cb2722211d6"]]},{"id":"392a697b4634d075","type":"function","z":"17235fd954b8a4ef","g":"eeed2225d908a87a","name":"Declare Flow Variables","func":"flow.set(\"brightnessTolerance\",15);\nflow.set(\"kelvinTolerance\",500);\nflow.set(\"brightnessMaxStep\",4);\nflow.set(\"colorTempMaxStep\",20);\nflow.set(\"dynamicColorTempOn\",true);\nflow.set(\"dynamicBrightnessOn\",true);\nflow.set(\"onPrecipitationColorTemperature\",2300);\nflow.set(\"virtualLightID\",\"light.virtual_\" + env.get(\"Name\"))\nflow.set(\"currentBrightness\",null);\nflow.set(\"currentColorTemperature\",null);\nflow.set(\"update_master_when_lights_change_BUSY\",false); // Get the current value of \"busy\"\nflow.set(\"lights_OFF_ON_or_ON_OFF_BUSY\",false);\nflow.set(\"update_lights_when_master_changes_BUSY\",false);\nflow.set(\"master_OFF_ON_or_ON_OFF_BUSY\",false);\nflow.set(\"circadian_iterator_BUSY\",false);\nmsg.payload = \"Flow Variables Set\";\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1060,"y":160,"wires":[["ab389d6c6509bf7e"]]},{"id":"8a3ee2db627f2370","type":"inject","z":"17235fd954b8a4ef","g":"eeed2225d908a87a","name":"","props":[],"repeat":"","crontab":"","once":true,"onceDelay":"0.1","topic":"","x":760,"y":160,"wires":[["392a697b4634d075"]]},{"id":"6c477adeda78bf1a","type":"inject","z":"17235fd954b8a4ef","g":"43cab6c94723c42b","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":770,"y":260,"wires":[["f35153c3b6528861"]]},{"id":"c7d65ea5adf38a95","type":"function","z":"17235fd954b8a4ef","g":"43cab6c94723c42b","name":"Clear Entity Ids variable","func":"if(msg.payload === \"clear\"){\n    flow.set('entityMessages', undefined);\n\n    // Return the original message (optional)\n    msg.payload = \"cleared\";\n    return msg;\n}\n// Return the original message (optional)\n\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1280,"y":260,"wires":[["ab389d6c6509bf7e"]]},{"id":"3b640ff3fb6bf352","type":"function","z":"17235fd954b8a4ef","g":"5b69f11fbb1649ca","name":"read the entities","func":"if(msg.payload === \"read\"){\n  // Get the entity ID from the message (optional)\n    const entityId = msg.data && msg.data.entity_id;\n    \n    // Get the entity messages from the flow variable\n    const entityMessages = flow.get(\"entityMessages\") || {};\n    \n    // Check if entity ID is provided or if all messages are requested\n    if (entityId) {\n      // Read messages for a specific entity ID\n      const messages = entityMessages[entityId];\n      \n      // Check if messages exist for the entity ID\n      if (messages) {\n        // Send the messages for the specific entity ID\n        for (const message of messages) {\n          node.send(message);\n          node.done();\n        }\n      } else {\n        // Handle the case where no messages exist for the entity ID\n        node.send(`No messages found for entity ID: ${entityId}`);\n        node.done();\n      }\n    } else {\n      for (const entityId in entityMessages) {\n        const messages = entityMessages[entityId];\n        \n        // Send the messages for each entity ID\n        for (const message of messages) {\n          node.send(message);\n          node.done();\n        }\n      }\n    }\n}\n\n\n  \n  \n ","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1310,"y":360,"wires":[["ab389d6c6509bf7e"]]},{"id":"4b2fd9de87915524","type":"inject","z":"17235fd954b8a4ef","g":"5b69f11fbb1649ca","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":770,"y":360,"wires":[["9cd5822b4c02e80b"]]},{"id":"4a56570c049afcd9","type":"ha-switch","z":"17235fd954b8a4ef","g":"e4c88bf6451774c7","name":"Dynamic Brightness","version":0,"debugenabled":false,"inputs":0,"outputs":2,"entityConfig":"afdc4e7a27220b81","enableInput":false,"outputOnStateChange":true,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":1830,"y":280,"wires":[[],[]]},{"id":"860dd78f2856f92a","type":"ha-switch","z":"17235fd954b8a4ef","g":"e4c88bf6451774c7","name":"Dynamic Color Temperature","version":0,"debugenabled":false,"inputs":0,"outputs":2,"entityConfig":"e6217b29e753b525","enableInput":false,"outputOnStateChange":true,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":1860,"y":460,"wires":[[],[]]},{"id":"36de1eee2a0690e5","type":"ha-select","z":"17235fd954b8a4ef","g":"e4c88bf6451774c7","name":"Default Mode","version":1,"debugenabled":false,"inputs":0,"outputs":1,"entityConfig":"cd030f73a48c73bf","mode":"listen","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValua","propertyType":"msg","value":"","valueType":"previousValue"}],"x":1800,"y":220,"wires":[[]]},{"id":"b3f005c7e3491eb9","type":"ha-number","z":"17235fd954b8a4ef","g":"e4c88bf6451774c7","name":"Circadian Max Brightness","version":1,"debugenabled":false,"inputs":0,"outputs":1,"entityConfig":"95bec4fa9ba26c12","mode":"listen","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":1850,"y":340,"wires":[[]]},{"id":"eef9ee6c343310a6","type":"ha-number","z":"17235fd954b8a4ef","g":"e4c88bf6451774c7","name":"Circadian Min Brightness","version":1,"debugenabled":false,"inputs":0,"outputs":1,"entityConfig":"26f878590ab085bd","mode":"listen","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":1850,"y":400,"wires":[[]]},{"id":"3c572e66698f0d6c","type":"ha-number","z":"17235fd954b8a4ef","g":"e4c88bf6451774c7","name":"Circadian Max Color Temperature","version":1,"debugenabled":false,"inputs":0,"outputs":1,"entityConfig":"ef3b15931f4e3eee","mode":"listen","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":1880,"y":520,"wires":[[]]},{"id":"4d6234123db4bf85","type":"ha-number","z":"17235fd954b8a4ef","g":"e4c88bf6451774c7","name":"Circadian Min Color Temperature","version":1,"debugenabled":false,"inputs":0,"outputs":1,"entityConfig":"952b82ddd83ce5b8","mode":"listen","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":1870,"y":580,"wires":[[]]},{"id":"78c7c6cd7de81881","type":"ha-select","z":"17235fd954b8a4ef","g":"fede2d2cc6757096","name":"","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"7a3872aa6f2b2dea","mode":"get","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":790,"y":1760,"wires":[["86421df578bb3bd9"]]},{"id":"86421df578bb3bd9","type":"switch","z":"17235fd954b8a4ef","g":"fede2d2cc6757096","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"Sleep","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":990,"y":1760,"wires":[["e905e44bd1431eb3"],[]]},{"id":"e905e44bd1431eb3","type":"api-current-state","z":"17235fd954b8a4ef","g":"fede2d2cc6757096","name":"","server":"13f57a0.20e1386","version":3,"outputs":2,"halt_if":"on","halt_if_type":"str","halt_if_compare":"is","entity_id":"{{flow.virtualLightID}}","state_type":"str","blockInputOverrides":false,"outputProperties":[],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":1240,"y":1760,"wires":[["8ccb1542fa2e9408"],[]]},{"id":"a0eb7548877048bf","type":"api-call-service","z":"17235fd954b8a4ef","g":"fede2d2cc6757096","name":"","server":"13f57a0.20e1386","version":7,"debugenabled":false,"action":"light.turn_on","floorId":[],"areaId":[],"deviceId":[],"entityId":["{{flow.virtualLightID}}"],"labelId":[],"data":"{\"rgbww_color\":[255,0,0,0,0],\"brightness\":1}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"light","service":"turn_on","x":1650,"y":1760,"wires":[["19c2a17840770268"]]},{"id":"91db1aef9fdaea54","type":"ha-select","z":"17235fd954b8a4ef","g":"fede2d2cc6757096","name":"","version":1,"debugenabled":false,"inputs":0,"outputs":1,"entityConfig":"7a3872aa6f2b2dea","mode":"listen","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValua","propertyType":"msg","value":"","valueType":"previousValue"}],"x":230,"y":1760,"wires":[["6e89a4ef9a17f8c7"]]},{"id":"6e89a4ef9a17f8c7","type":"rbe","z":"17235fd954b8a4ef","g":"fede2d2cc6757096","name":"","func":"rbe","gap":"","start":"","inout":"out","septopics":true,"property":"payload","topi":"topic","x":430,"y":1760,"wires":[["78c7c6cd7de81881"]]},{"id":"a6da46eb05f03928","type":"presence-faker","z":"17235fd954b8a4ef","g":"732877e34138818a","name":"","onPayload":"true","onPayloadType":"bool","onTopic":"faker","offPayload":"false","offPayloadType":"bool","offTopic":"faker","windowBegin":"06:30","windowEnd":"23:00","minDurationHours":0,"minDurationMinutes":"30","minDurationSeconds":"0","minDuration":"1800","maxDurationHours":"3","maxDurationMinutes":0,"maxDurationSeconds":"0","maxDuration":"10800","minCount":"1","maxCount":"3","startupBehavior":"onMsg","actionOnDisable":"off","firstBlockType":"on","lastBlockType":"off","isLoggingEnabled":false,"x":800,"y":2080,"wires":[["4107bd4a4ea78d1d"]]},{"id":"b2ac6c2139a63c96","type":"ha-select","z":"17235fd954b8a4ef","g":"732877e34138818a","name":"","version":1,"debugenabled":false,"inputs":0,"outputs":1,"entityConfig":"7a3872aa6f2b2dea","mode":"listen","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValua","propertyType":"msg","value":"","valueType":"previousValue"}],"x":150,"y":2080,"wires":[["41693e3a9b6aa652"]]},{"id":"049ed69ee8b2b874","type":"function","z":"17235fd954b8a4ef","g":"732877e34138818a","name":"function 21","func":"if (msg.payload === \"Away\") {\n    msg.payload = true; // Set payload to true if it was \"Away\"\n} else {\n    msg.payload = false; // Set payload to false otherwise\n}\nreturn msg; ","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":450,"y":2080,"wires":[["e90a3c9cf2063030"]]},{"id":"85107b83ba7ebbb5","type":"api-call-service","z":"17235fd954b8a4ef","g":"732877e34138818a","name":"","server":"13f57a0.20e1386","version":7,"debugenabled":false,"action":"light.{{payload}}","floorId":[],"areaId":[],"deviceId":[],"entityId":["{{flow.virtualLightID}}"],"labelId":[],"data":"","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"light","service":"{{payload}}","x":1650,"y":2080,"wires":[["a8dba29bcb053abb"]]},{"id":"4107bd4a4ea78d1d","type":"function","z":"17235fd954b8a4ef","g":"732877e34138818a","name":"function 22","func":"if (msg.payload) {\n    msg.payload = \"turn_on\"; // Set payload to true if it was \"Away\"\n    return [msg,null];\n    \n} else {\n    msg.payload = \"turn_off\"; // Set payload to false otherwise\n    return [null,msg];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1030,"y":2080,"wires":[["5659d219e102b8f0"],["0c28c1adfde16256"]]},{"id":"41693e3a9b6aa652","type":"rbe","z":"17235fd954b8a4ef","g":"732877e34138818a","name":"","func":"rbe","gap":"","start":"","inout":"out","septopics":true,"property":"payload","topi":"topic","x":290,"y":2080,"wires":[["049ed69ee8b2b874"]]},{"id":"195bcb4ad089d67c","type":"ha-select","z":"17235fd954b8a4ef","g":"c90ca113dabe3a16","name":"","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"7a3872aa6f2b2dea","mode":"set","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"true","valueType":"bool"},{"property":"previousValua","propertyType":"msg","value":"","valueType":"previousValue"}],"x":1550,"y":1380,"wires":[[]]},{"id":"f6fc01cb39e99c13","type":"ha-select","z":"17235fd954b8a4ef","g":"c90ca113dabe3a16","name":"","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"7a3872aa6f2b2dea","mode":"get","value":"payload","valueType":"msg","outputProperties":[{"property":"currentValue","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValua","propertyType":"msg","value":"","valueType":"previousValue"}],"x":690,"y":1380,"wires":[["f65d5cc27258926a"]]},{"id":"f65d5cc27258926a","type":"switch","z":"17235fd954b8a4ef","g":"c90ca113dabe3a16","name":"","property":"currentValue","propertyType":"msg","rules":[{"t":"eq","v":"Away","vt":"str"},{"t":"eq","v":"Sleep","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":3,"x":870,"y":1380,"wires":[[],[],["89e14c8ce254a525"]]},{"id":"c530d25cda7de864","type":"function","z":"17235fd954b8a4ef","g":"c90ca113dabe3a16","name":"Changes dynamicColorTempOn","func":"//flow.set('dynamicColorTempOn',true);\n//flow.set('dynamicBrightnessOn', true);\n\nmsg.enable = true;\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":490,"y":1480,"wires":[["b748aba68f01e645","8ff1deafec7928d9"]]},{"id":"b748aba68f01e645","type":"ha-switch","z":"17235fd954b8a4ef","g":"c90ca113dabe3a16","name":"Dynamic Color Temperature","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"e6217b29e753b525","enableInput":true,"outputOnStateChange":true,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":900,"y":1500,"wires":[[],[]]},{"id":"8ff1deafec7928d9","type":"ha-switch","z":"17235fd954b8a4ef","g":"c90ca113dabe3a16","name":"Dynamic Brightness","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"afdc4e7a27220b81","enableInput":true,"outputOnStateChange":true,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":870,"y":1440,"wires":[[],[]]},{"id":"f35153c3b6528861","type":"switch","z":"17235fd954b8a4ef","g":"43cab6c94723c42b","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"clear","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":1040,"y":260,"wires":[["c7d65ea5adf38a95"]]},{"id":"9cd5822b4c02e80b","type":"switch","z":"17235fd954b8a4ef","g":"5b69f11fbb1649ca","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"read","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":1060,"y":360,"wires":[["3b640ff3fb6bf352"]]},{"id":"4b73dbb4c765e672","type":"link in","z":"17235fd954b8a4ef","name":"link in 4","links":["ab389d6c6509bf7e","19c2a17840770268","a8dba29bcb053abb","94407f156d7711dc","15343c9e55490efb","9ae84e042bf3d9e8","97efd3a6310e0fb2","6677f5ea2efcd6e8","216ddf4e879ea40f","9a25684ca272c455","713aa0b3a902a1b0","defc832bd6fe5f47","cde4218df76352a1","f0d93ee93785e4ed","e46554afaa5af226","7347fe3a3231db47","8312e61b37c6d0da"],"x":2315,"y":180,"wires":[[]]},{"id":"ab389d6c6509bf7e","type":"link out","z":"17235fd954b8a4ef","name":"link out 5","mode":"link","links":["4b73dbb4c765e672"],"x":1625,"y":160,"wires":[]},{"id":"81f198c1d5cda5c5","type":"switch","z":"17235fd954b8a4ef","g":"c90ca113dabe3a16","name":"","property":"payload.event.new_state.state","propertyType":"msg","rules":[{"t":"eq","v":"on","vt":"str"},{"t":"eq","v":"off","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":530,"y":1380,"wires":[[],["f6fc01cb39e99c13","c530d25cda7de864"]]},{"id":"bc314d6deae86b0a","type":"rbe","z":"17235fd954b8a4ef","g":"c90ca113dabe3a16","name":"","func":"rbe","gap":"","start":"","inout":"out","septopics":true,"property":"payload.event.new_state.state","topi":"topic","x":410,"y":1380,"wires":[["81f198c1d5cda5c5"]]},{"id":"737c739f16fcbd2b","type":"switch","z":"17235fd954b8a4ef","g":"fede2d2cc6757096","name":"","property":"payload.event.new_state.state","propertyType":"msg","rules":[{"t":"eq","v":"on","vt":"str"},{"t":"eq","v":"off","vt":"str"}],"checkall":"true","repair":false,"outputs":2,"x":470,"y":1840,"wires":[["78c7c6cd7de81881"],[]]},{"id":"c91f5c8567840caf","type":"rbe","z":"17235fd954b8a4ef","g":"fede2d2cc6757096","name":"","func":"rbe","gap":"","start":"","inout":"out","septopics":true,"property":"payload.event.new_state.state","topi":"topic","x":330,"y":1840,"wires":[["737c739f16fcbd2b"]]},{"id":"53db8cb2722211d6","type":"switch","z":"17235fd954b8a4ef","g":"9f91a26760260398","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"clear","vt":"str"},{"t":"eq","v":"read","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":3,"x":1100,"y":480,"wires":[["c7d65ea5adf38a95"],["3b640ff3fb6bf352"],[]]},{"id":"544b0a522c143f1a","type":"ha-select","z":"17235fd954b8a4ef","g":"e4c88bf6451774c7","name":"Mode Select","version":1,"debugenabled":false,"inputs":0,"outputs":1,"entityConfig":"7a3872aa6f2b2dea","mode":"listen","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValua","propertyType":"msg","value":"","valueType":"previousValue"}],"x":1800,"y":160,"wires":[[]]},{"id":"89e14c8ce254a525","type":"ha-select","z":"17235fd954b8a4ef","g":"c90ca113dabe3a16","name":"Default Mode","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"cd030f73a48c73bf","mode":"get","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValua","propertyType":"msg","value":"","valueType":"previousValue"}],"x":1150,"y":1380,"wires":[["195bcb4ad089d67c"]]},{"id":"7ba086d48ad49347","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"turning ON or OFF?","func":"  // Determine State Change \nlet wasOn = msg.payload.event.old_state.state  === \"on\";\nlet isOn = msg.payload.event.new_state.state  === \"on\";\n\n  // Prioritize State Change from Off to On\n  if (!wasOn && isOn) {\n    return [msg,null]; \n  } else if(wasOn && !isOn){\n    return [null,msg]; \n  }","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":300,"y":4700,"wires":[["6b64a04dc7ae0b0c"],["5144f2287f40f423"]]},{"id":"b1a399dd9a782e04","type":"ha-select","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"7a3872aa6f2b2dea","mode":"get","value":"payload","valueType":"msg","outputProperties":[{"property":"mode","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":490,"y":4420,"wires":[["c0a8e0923515ec4d"]]},{"id":"c0a8e0923515ec4d","type":"switch","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"","property":"mode","propertyType":"msg","rules":[{"t":"eq","v":"Circadian","vt":"str"},{"t":"eq","v":"Away","vt":"str"},{"t":"eq","v":"Sleep","vt":"str"},{"t":"eq","v":"Manual","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":550,"y":4340,"wires":[["63d09e4d1e649378"],["63d09e4d1e649378"],["cbecd026218cc07a"],["7bbfab46332b92da"]]},{"id":"0fd6bb07223c6a2a","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Send Values to Lights","func":"const entityMessages = flow.get(\"entityMessages\");\nconst brightness = msg.circadianValues.brightness;\nconst color_temperature = msg.circadianValues.color_temp;\n\nfor (const entityId in entityMessages) {\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n\n    let jsonData;\n    jsonData = `{\"brightness\":${brightness},\"kelvin\":${color_temperature}}`;\n    node.send([null,{ entityId, JSON: jsonData ,state: \"on\",brightness: brightness, kelvin: color_temperature }]);\n    node.done();\n  }\n}\n\nreturn msg;","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1160,"y":4320,"wires":[["4b753819ac060a4f"],["590630caa2e8a456"]]},{"id":"4b753819ac060a4f","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Calculate Average Bright/CT/RGB","func":"/*\nSince this is OFF->ON, the master\nshould have the same values as all\nthe lights since they are all being\nturned on at the same time.\n*/\n\n\nconst brightness = msg.circadianValues.brightness;\nconst color_temperature = msg.circadianValues.color_temp;\nconst targetEntityID = flow.get(\"virtualLightID\");\n\nlet jsonData;\njsonData = `{\"brightness\":${brightness},\"kelvin\":${color_temperature}}`;\nnode.send([null,{targetEntityID, JSON: jsonData }]);\nnode.done();\nreturn msg;\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1460,"y":4320,"wires":[["550ebeab27b6da01"],["cac3beb9cc0a2722"]]},{"id":"6b64a04dc7ae0b0c","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Verify if busy.","func":"let busy1 = flow.get(\"update_master_when_lights_change_BUSY\"); // Get the current value of \"busy\"\nlet busy2 = flow.get(\"lights_OFF_ON_or_ON_OFF_BUSY\");\nlet busy3 = flow.get(\"update_lights_when_master_changes_BUSY\");\nlet busy5 = flow.get(\"circadian_iterator_BUSY\");\nif (busy1 || busy2 || busy3 || busy5) { // Check if busy is true\n    // Do nothing\n} else {\n    return msg; \n}","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":310,"y":4580,"wires":[["b1a399dd9a782e04"]]},{"id":"f2b84cc211e3c63e","type":"sun-position","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"","positionConfig":"26f98e1b.bd1812","rules":[],"onlyOnChange":"true","topic":"","outputs":1,"start":"","startType":"none","startOffset":0,"startOffsetType":"num","startOffsetMultiplier":60000,"end":"","endType":"none","endOffset":0,"endOffsetType":"num","endOffsetMultiplier":60000,"x":490,"y":2320,"wires":[["4693a5d8a346a1bb","c3448f5c8628ab4d"]]},{"id":"4693a5d8a346a1bb","type":"function","z":"17235fd954b8a4ef","d":true,"g":"653fd4888fcfeedb","name":"Times of Day","func":"let newmsg = JSON.parse(JSON.stringify(msg));\nnewmsg.payload.times_of_day = {};\n\nfunction processTimeOfDay(nme, obj, name_start, name_end) {\n    let ret = {};\n    ret.name  = nme;\n    ret.start = obj.times[name_start].ts;\n    ret.end   = obj.times[name_end].ts;\n    ret.perc  = (obj.ts - ret.start) / (ret.end - ret.start);\n    \n    \n    // to cover range starting before midnight and ending after it.\n    if (ret.start > ret.end)\n    {\n        let a;\n\n        // before midnight\n        if (ret.start < obj.ts) \n        {\n            a = new Date(ret.end);\n            a.setUTCDate(a.getUTCDate() + 1);\n            ret.end = a.getTime();\n             \n             \n        }\n        else if (ret.end > obj.ts) \n        {\n            a = new Date(ret.start);\n            a.setUTCDate(a.getUTCDate() - 1);\n            ret.start = a.getTime();\n\n        }\n\n    }\n    \n    ret.perc  = (obj.ts - ret.start) / (ret.end - ret.start);\n    \n    obj.times_of_day[nme] = ret;\n    if (ret.start <= obj.ts && obj.ts < ret.end ) obj.times_of_day.active = ret;\n}\n\n\nprocessTimeOfDay('night', newmsg.payload, \"astronomicalDusk\", \"astronomicalDawn\");\nprocessTimeOfDay('morning', newmsg.payload, \"astronomicalDawn\", \"goldenHourDawnEnd\");\nprocessTimeOfDay('day', newmsg.payload, \"goldenHourDawnEnd\", \"sunsetStart\");\nprocessTimeOfDay('evening', newmsg.payload, \"sunsetStart\", \"astronomicalDusk\");\n\n\nreturn newmsg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":690,"y":2320,"wires":[["02e9197abdcebf7c"]]},{"id":"02e9197abdcebf7c","type":"switch","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"curve switch","property":"payload.times_of_day.active.name","propertyType":"msg","rules":[{"t":"eq","v":"night","vt":"str"},{"t":"eq","v":"morning","vt":"str"},{"t":"eq","v":"day","vt":"str"},{"t":"eq","v":"evening","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":290,"y":2640,"wires":[["c2e1a6076f127ff6","bbf1398e19a41988"],["e9cf6b441fc33fe6","39b40a8dc8e2e77b"],["190b54d9e364cf3d","90dcb1282441d831"],["b9a127809a6f64e6","7d4bd1dc314c9878"]]},{"id":"613dec438decd9f4","type":"join","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"","mode":"custom","build":"object","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":1330,"y":2640,"wires":[["3daa577d4d18ab48","c3db95e336b3378b","8a3835c0d47d9080"]]},{"id":"bbf1398e19a41988","type":"spline-curve","z":"17235fd954b8a4ef","g":"9dbc78bb3b2f520d","name":"night curve","output_key":"","input_key":"payload.times_of_day.active.perc","points":[{"x":0.005,"y":0.25},{"x":0.24,"y":0.169},{"x":0.473,"y":0.087},{"x":0.783,"y":0},{"x":0.999,"y":0}],"x":590,"y":2600,"wires":[["a4561eb6b1e2b76b"]]},{"id":"39b40a8dc8e2e77b","type":"spline-curve","z":"17235fd954b8a4ef","g":"9dbc78bb3b2f520d","name":"morning curve","output_key":"","input_key":"payload.times_of_day.active.perc","points":[{"x":0,"y":0.01},{"x":0.132,"y":0.01},{"x":0.269,"y":0.027},{"x":0.449,"y":0.124},{"x":0.676,"y":0.334},{"x":1,"y":0.75}],"x":600,"y":2640,"wires":[["a4561eb6b1e2b76b"]]},{"id":"7d4bd1dc314c9878","type":"spline-curve","z":"17235fd954b8a4ef","g":"9dbc78bb3b2f520d","name":"evening curve","output_key":"","input_key":"payload.times_of_day.active.perc","points":[{"x":0,"y":0.85},{"x":0.274,"y":0.562},{"x":0.71,"y":0.302},{"x":0.999,"y":0.25}],"x":600,"y":2720,"wires":[["a4561eb6b1e2b76b"]]},{"id":"90dcb1282441d831","type":"spline-curve","z":"17235fd954b8a4ef","g":"9dbc78bb3b2f520d","name":"daylight curve","output_key":"","input_key":"payload.times_of_day.active.perc","points":[{"x":0,"y":0.744},{"x":0.03,"y":0.838},{"x":0.097,"y":0.941},{"x":0.183,"y":1},{"x":0.86,"y":0.995},{"x":0.939,"y":0.93},{"x":1,"y":0.85}],"x":600,"y":2680,"wires":[["a4561eb6b1e2b76b"]]},{"id":"1df7f8a010b89943","type":"change","z":"17235fd954b8a4ef","g":"9dbc78bb3b2f520d","name":"","rules":[{"t":"set","p":"topic","pt":"msg","to":"brightness","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1130,"y":2640,"wires":[["613dec438decd9f4"]]},{"id":"a4561eb6b1e2b76b","type":"function","z":"17235fd954b8a4ef","g":"9dbc78bb3b2f520d","name":"Brightness scale","func":"// Get the scaling configuration from flow variables\nlet inputMin =  0;\nlet inputMax =  1;\nlet outputMin = flow.get('circMinBrightness') || 0;\nlet outputMax = flow.get('circMaxBrightness') || 255;\n\n// Get the input value from msg.payload\nlet inputValue = Number(msg.payload);\n\n// Clamp the input value to the specified range\ninputValue = Math.max(inputMin, Math.min(inputMax, inputValue));\n\n// Scale the value to the output range\nlet outputValue = ((inputValue - inputMin) / (inputMax - inputMin)) * (outputMax - outputMin) + outputMin;\n\n// Round to the nearest integer if needed\noutputValue = Math.round(outputValue);  // Comment this out if you want floating-point results\n\n// Set the output payload\nmsg.payload = outputValue;\n\n// Pass the message along\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":930,"y":2640,"wires":[["1df7f8a010b89943"]]},{"id":"c2e1a6076f127ff6","type":"spline-curve","z":"17235fd954b8a4ef","g":"badfdfc67767cdc3","name":"night curve","output_key":"","input_key":"payload.times_of_day.active.perc","points":[{"x":0.003,"y":0.06},{"x":0.606,"y":0}],"x":590,"y":2820,"wires":[["0955f6c1c967ff51"]]},{"id":"e9cf6b441fc33fe6","type":"spline-curve","z":"17235fd954b8a4ef","g":"badfdfc67767cdc3","name":"morning curve","output_key":"","input_key":"payload.times_of_day.active.perc","points":[{"x":0,"y":0},{"x":0.42,"y":0.018},{"x":0.54,"y":0.051},{"x":0.587,"y":0.101},{"x":0.817,"y":0.675},{"x":1,"y":0.85}],"x":600,"y":2860,"wires":[["0955f6c1c967ff51"]]},{"id":"b9a127809a6f64e6","type":"spline-curve","z":"17235fd954b8a4ef","g":"badfdfc67767cdc3","name":"evening curve","output_key":"","input_key":"payload.times_of_day.active.perc","points":[{"x":0.009,"y":0.65},{"x":0.133,"y":0.469},{"x":1,"y":0.06}],"x":600,"y":2940,"wires":[["0955f6c1c967ff51"]]},{"id":"190b54d9e364cf3d","type":"spline-curve","z":"17235fd954b8a4ef","g":"badfdfc67767cdc3","name":"daylight curve","output_key":"","input_key":"payload.times_of_day.active.perc","points":[{"x":0,"y":0.85},{"x":0.123,"y":0.927},{"x":0.5,"y":1},{"x":0.625,"y":0.987},{"x":0.992,"y":0.65}],"x":600,"y":2900,"wires":[["0955f6c1c967ff51"]]},{"id":"deea35732313fdc7","type":"change","z":"17235fd954b8a4ef","g":"badfdfc67767cdc3","name":"","rules":[{"t":"set","p":"topic","pt":"msg","to":"color_temp","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1130,"y":3120,"wires":[["613dec438decd9f4"]]},{"id":"0955f6c1c967ff51","type":"function","z":"17235fd954b8a4ef","g":"badfdfc67767cdc3","name":"Color Temperature scale","func":"// Get the scaling configuration from flow variables\nlet inputMin =  0;\nlet inputMax =  1;\nlet outputMin = flow.get('circMinColor_temp') || 2000;\nlet outputMax = flow.get('circMaxColor_temp') || 6535;\n\n// Get the input value from msg.payload\nlet inputValue = Number(msg.payload);\n\n// Clamp the input value to the specified range\ninputValue = Math.max(inputMin, Math.min(inputMax, inputValue));\n\n// Scale the value to the output range\nlet outputValue = ((inputValue - inputMin) / (inputMax - inputMin)) * (outputMax - outputMin) + outputMin;\n\n// Round to the nearest integer if needed\noutputValue = Math.round(outputValue);  // Comment this out if you want floating-point results\n\n// Set the output payload\nmsg.payload = outputValue;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":950,"y":2880,"wires":[["b8334247a587b197"]]},{"id":"b8334247a587b197","type":"function","z":"17235fd954b8a4ef","g":"badfdfc67767cdc3","name":"Adjust CT acording to cloud coverage and Weather code","func":"// Get current cloud coverage and weather code\nlet cloudCoverage = global.get(\"cloudCoverage\");\nlet weatherCode = global.get(\"weatherCode\");\n\n// Get current color temperature and minimum limit\nconst currentColorTemperature = msg.payload;\nconst minColorTemperature = flow.get(\"circMinColor_temp\");\n\n// Customizable reduction percentage (e.g., 50 means 50% reduction at 100% cloud cover)\nconst maxReductionPercentage = 60; // You can adjust this value\n\n// Calculate the adjustable range of color temperature\nconst colorTemperatureRange = currentColorTemperature - minColorTemperature;\n\n// Calculate the reduction percentage based on cloud coverage and the defined maximum\nconst reductionPercentage = (cloudCoverage * maxReductionPercentage) / 100;\n\nif (weatherCode >= 800) { // Clear skies\n    // Apply adjustment, ensuring the temperature doesn't go below the minimum and round to the nearest integer\n    msg.payload = Math.round(Math.max(currentColorTemperature - (colorTemperatureRange * reductionPercentage) / 100, minColorTemperature));\n} else { // Precipitation\n    // Round the precipitation color temperature to the nearest integer\n    msg.payload = Math.round(flow.get(\"onPrecipitationColorTemperature\"));\n}\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":950,"y":3020,"wires":[["deea35732313fdc7"]]},{"id":"82256c34d63ad7db","type":"inject","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"","props":[],"repeat":"10","crontab":"","once":true,"onceDelay":0.1,"topic":"","x":90,"y":2320,"wires":[["f2b84cc211e3c63e"]]},{"id":"3daa577d4d18ab48","type":"function","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"Smooth Values","func":"// Get the flow variable or define a default max step if not found\nlet brightnessMaxStep = flow.get('brightnessMaxStep') || 5;\nlet colorTempMaxStep = flow.get('colorTempMaxStep') || 10; // Adjust for color temp\n\n// --- Check for \"reset\" ---\n\nif (msg.payload === \"reset\") {\n    // Remove values from the context\n    context.set('lastSmoothedBrightness', undefined);\n    context.set('lastSmoothedColorTemp', undefined);\n    return [null,msg]; // Stop further processing for this message\n}\n\n// --- Brightness Smoothing ---\n\n// Initialize or get the last smoothed brightness\nlet lastSmoothedBrightness = context.get('lastSmoothedBrightness');\nlet currentBrightness = Number(msg.payload.brightness) || 0;\n\nif (lastSmoothedBrightness === undefined) { \n    // If no previous value exists, use the current value\n    lastSmoothedBrightness = currentBrightness;\n}\n\nlet brightnessDesiredChange = currentBrightness - lastSmoothedBrightness;\nlet brightnessLimitedChange;\n\n// Apply smoothing logic \nif (Math.abs(brightnessDesiredChange) <= brightnessMaxStep) {\n    brightnessLimitedChange = brightnessDesiredChange;\n} else if (brightnessDesiredChange > 0) {\n    brightnessLimitedChange = brightnessMaxStep;\n} else {\n    brightnessLimitedChange = -brightnessMaxStep;\n}\n\nlet newSmoothedBrightness = lastSmoothedBrightness + brightnessLimitedChange;\ncontext.set('lastSmoothedBrightness', newSmoothedBrightness);\n\n\n// --- Color Temperature Smoothing ---\n\n// (Same logic as brightness, but for color_temp)\n\nlet lastSmoothedColorTemp = context.get('lastSmoothedColorTemp');\nlet currentColorTemp = Number(msg.payload.color_temp) || 0;\n\nif (lastSmoothedColorTemp === undefined) {\n    // If no previous value exists, use the current value\n    lastSmoothedColorTemp = currentColorTemp;\n}\n\nlet colorTempDesiredChange = currentColorTemp - lastSmoothedColorTemp;\nlet colorTempLimitedChange;\n\nif (Math.abs(colorTempDesiredChange) <= colorTempMaxStep) {\n    colorTempLimitedChange = colorTempDesiredChange;\n} else if (colorTempDesiredChange > 0) {\n    colorTempLimitedChange = colorTempMaxStep;\n} else {\n    colorTempLimitedChange = -colorTempMaxStep;\n}\n\nlet newSmoothedColorTemp = lastSmoothedColorTemp + colorTempLimitedChange;\ncontext.set('lastSmoothedColorTemp', newSmoothedColorTemp);\n\n\n// --- Output ---\n\nmsg.payload = { \n    brightness: newSmoothedBrightness,\n    color_temp: newSmoothedColorTemp\n};\nreturn msg;\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1540,"y":2640,"wires":[["5aa52179fd32a01d"],[]]},{"id":"5aa52179fd32a01d","type":"function","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"Store Values on Flow Variables","func":"flow.set(\"currentBrightness\",msg.payload.brightness);\nflow.set(\"currentColorTemperature\",msg.payload.color_temp);\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1810,"y":2640,"wires":[["b15848cd381d1466","93ed5d3ad882290c"]]},{"id":"5ac08d6af5dd69eb","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Get Circadian Values","func":"\n\nmsg.circadianValues = { \n    brightness: flow.get(\"currentBrightness\"),\n    color_temp: flow.get(\"currentColorTemperature\")\n};\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":920,"y":4320,"wires":[["0fd6bb07223c6a2a"]]},{"id":"d27ceeff2ee5c378","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Send OFF to Lights","func":"const entityMessages = flow.get(\"entityMessages\");\n\nfor (const entityId in entityMessages) {\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n\n    \n    let jsonData;\n    jsonData = `{\"brightness\":0}`;\n    node.send([null,{ entityId, JSON: jsonData , state: \"off\"}]);\n    node.done();\n  }\n}\n\nreturn msg;","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":300,"y":4820,"wires":[["ab42e19ba0cb10ec"],["808d56f095f8e52d"]]},{"id":"a5bcef381e5c9e24","type":"api-call-service","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"","server":"13f57a0.20e1386","version":7,"debugenabled":false,"action":"light.turn_on","floorId":[],"areaId":[],"deviceId":[],"entityId":["{{targetEntityID}}"],"labelId":[],"data":"{{{JSON}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"light","service":"turn_on","x":1890,"y":4380,"wires":[["15343c9e55490efb"]]},{"id":"14abb9be49e59fe4","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Release Busy State","func":"flow.set(\"master_OFF_ON_or_ON_OFF_BUSY\", false); // Set the \"busy\" variable to false\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1900,"y":4320,"wires":[[]]},{"id":"63d09e4d1e649378","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Set Busy State","func":"flow.set(\"master_OFF_ON_or_ON_OFF_BUSY\", true); // Set the \"busy\" variable to true\nsetTimeout(() => {\n    flow.set(\"master_OFF_ON_or_ON_OFF_BUSY\", false);\n}, 4000);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":720,"y":4320,"wires":[["5ac08d6af5dd69eb"]]},{"id":"5144f2287f40f423","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Set Busy State","func":"flow.set(\"master_OFF_ON_or_ON_OFF_BUSY\", true); // Set the \"busy\" variable to true\nsetTimeout(() => {\n    flow.set(\"master_OFF_ON_or_ON_OFF_BUSY\", false);\n}, 4000);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":300,"y":4760,"wires":[["d27ceeff2ee5c378"]]},{"id":"977dc83a14e2ee04","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Release Busy State","func":"flow.set(\"master_OFF_ON_or_ON_OFF_BUSY\", false); // Set the \"busy\" variable to false\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":770,"y":4760,"wires":[[]]},{"id":"c15158b3608924c5","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Verify if busy.","func":"let busy1 = flow.get(\"update_master_when_lights_change_BUSY\"); // Get the current value of \"busy\"\nlet busy3 = flow.get(\"update_lights_when_master_changes_BUSY\");\nlet busy4 = flow.get(\"master_OFF_ON_or_ON_OFF_BUSY\");\nlet busy5 = flow.get(\"circadian_iterator_BUSY\");\nif (busy1 || busy3 || busy4 || busy5) { // Check if busy is true\n    // Do nothing\n} else {\n    return msg; \n}","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":190,"y":5420,"wires":[["873a1ec4e4ad0bec"]]},{"id":"873a1ec4e4ad0bec","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"turning ON or OFF?","func":"  // Determine State Change \nlet wasOn = msg.data.old_state.state  === \"on\";\nlet isOn = msg.data.new_state.state  === \"on\";\n\n  // Prioritize State Change from Off to On\n  if (!wasOn && isOn) {\n    return [msg,null]; \n  } else if(wasOn && !isOn){\n    return [null,msg]; \n  }","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":220,"y":5480,"wires":[["7004b343fbe31735"],["d209f51ec19b31f7"]]},{"id":"7004b343fbe31735","type":"ha-select","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"7a3872aa6f2b2dea","mode":"get","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":430,"y":5480,"wires":[["22934183a3a274c5"]]},{"id":"22934183a3a274c5","type":"switch","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"Circadian","vt":"str"},{"t":"eq","v":"Away","vt":"str"},{"t":"eq","v":"Sleep","vt":"str"},{"t":"eq","v":"Manual","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":430,"y":5400,"wires":[["04f2976e6082af1f"],["04f2976e6082af1f"],["30acb4e7d9b2412f"],["5bf6c42ff0644f1d"]]},{"id":"6b3191f2a8cd3d95","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Get Circadian Values","func":"\n\nmsg.circadianValues = { \n    brightness: flow.get(\"currentBrightness\"),\n    color_temp: flow.get(\"currentColorTemperature\")\n};\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":920,"y":5380,"wires":[["bcada5dfacde51bf"]]},{"id":"bcada5dfacde51bf","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Send Values to Lights","func":"const brightness = msg.circadianValues.brightness;\nconst color_temperature = msg.circadianValues.color_temp;\nconst entityId = msg.data.new_state.entity_id;\n\nlet jsonData;\njsonData = `{\"brightness\":${brightness},\"kelvin\":${color_temperature}}`;\nnode.send([null,{ entityId, JSON: jsonData ,state: \"on\",brightness: brightness, kelvin: color_temperature }]);\nnode.done();\nreturn msg;","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1180,"y":5380,"wires":[["896a3e4fb667937a"],["3442a91b6882e839"]]},{"id":"bd768ff1ee775485","type":"api-call-service","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"","server":"13f57a0.20e1386","version":7,"debugenabled":false,"action":"light.turn_on","floorId":[],"areaId":[],"deviceId":[],"entityId":["{{entityId}}"],"labelId":[],"data":"{{{JSON}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"light","service":"turn_on","x":1520,"y":5500,"wires":[["defc832bd6fe5f47"]]},{"id":"546eef753619bb58","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Prepare Message","func":"const brightness = msg.averageBrightness;\nconst color_temperature = msg.averageColorTemp;\nconst targetEntityID = flow.get(\"virtualLightID\");\n\nlet jsonData;\njsonData = `{\"brightness\":${brightness},\"kelvin\":${color_temperature}}`;\nnode.send([null,{targetEntityID, JSON: jsonData }]);\nnode.done();\nreturn msg;\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2070,"y":5380,"wires":[["25d4ff9de7824cdc"],["73c44de5a8e3a347"]]},{"id":"32e9f59a4099b50b","type":"api-call-service","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"","server":"13f57a0.20e1386","version":7,"debugenabled":false,"action":"light.turn_on","floorId":[],"areaId":[],"deviceId":[],"entityId":["{{targetEntityID}}"],"labelId":[],"data":"{{{JSON}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"light","service":"turn_on","x":2470,"y":5440,"wires":[["e46554afaa5af226"]]},{"id":"e3dd3d38fc21b010","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Release Busy State","func":"flow.set(\"lights_OFF_ON_or_ON_OFF_BUSY\", false); // Set the \"busy\" variable to false\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2560,"y":5380,"wires":[[]]},{"id":"148e27949a2798da","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Color Mode?","func":"\nconst entityMessages = flow.get(\"entityMessages\") || {};\nconst currentEntityId = msg.data.new_state.entity_id;\n\n//let totalBrightness = 0;\n//let entityCount = 0;\nlet colorModeFlag = false;\n\nfor (const entityId in entityMessages) {\n\n  if (entityId === currentEntityId) {\n    continue;\n  }\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.color_mode !== \"color_temp\" &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n      node.warn(message.new_state);\n      node.warn(message.new_state.attributes);\n      node.warn(message.new_state.attributes.color_mode);\n      node.warn(message.new_state.state);\n      colorModeFlag = true;\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\n\n//let averageBrightness;\nif(colorModeFlag){\n  return [null,msg];\n}else{\n  return [msg, null];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1670,"y":5380,"wires":[["11953829a3eb3833"],[]]},{"id":"25d4ff9de7824cdc","type":"delay","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"","pauseType":"delay","timeout":"750","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":2330,"y":5360,"wires":[["e3dd3d38fc21b010"]]},{"id":"5df99d44dd4e97c2","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Average Brightness","func":"const entityMessages = flow.get(\"entityMessages\") || {};\nconst currentEntityId = msg.data.new_state.entity_id;\n\n\nlet totalBrightness = 0;\nlet entityCount = 0;\n\nfor (const entityId in entityMessages) {\n\n  if (entityId === currentEntityId) {\n    continue;\n  }\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.brightness !== null &&\n        message.new_state.state !== \"unavailable\") {\n\n      totalBrightness += message.new_state.attributes.brightness;\n      entityCount++;\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\nlet averageBrightness;\nif(entityCount > 0){\n  averageBrightness = Math.floor((totalBrightness) / (entityCount));\n}else{\n  averageBrightness = 0;\n}\n\nmsg.averageBrightness = averageBrightness;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":240,"y":5600,"wires":[["6d956d07b6ea84cf"]]},{"id":"94e69538987cdb84","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Color Mode?","func":"\nconst entityMessages = flow.get(\"entityMessages\") || {};\nconst currentEntityId = msg.data.new_state.entity_id;\n\n//let totalBrightness = 0;\n//let entityCount = 0;\nlet colorModeFlag = false;\n\nfor (const entityId in entityMessages) {\n\n  if (entityId === currentEntityId) {\n    continue;\n  }\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.color_mode !== \"color_temp\" &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n      \n      colorModeFlag = true;\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\n\n//let averageBrightness;\nif(colorModeFlag){\n  return [null,msg];\n}else{\n  return [msg, null];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":510,"y":5720,"wires":[["cbca7b8cf57c2f0e"],["f3dc391c2266e9f0"]]},{"id":"cbca7b8cf57c2f0e","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Average CT","func":"const entityMessages = flow.get(\"entityMessages\") || {};\nconst currentEntityId = msg.data.new_state.entity_id;\n\n\nlet totalColorTemp = 0;\nlet entityCount = 0;\n\nfor (const entityId in entityMessages) {\n\n  if (entityId === currentEntityId) {\n    continue;\n  }\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.color_temp_kelvin !== null &&\n        message.new_state.state !== \"unavailable\") {\n\n      totalColorTemp += message.new_state.attributes.color_temp_kelvin;\n      entityCount++;\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\n\nlet averageColorTemp = Math.floor((totalColorTemp) / (entityCount));\n\nmsg.averageColorTemp = averageColorTemp;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":510,"y":5660,"wires":[["0b2b2c6a0dd6e83f"]]},{"id":"6d956d07b6ea84cf","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"All OFF?","func":"const averageBrightness = msg.averageBrightness;\n\nif(averageBrightness == 0){\n    return[msg,null];\n}else{\n    return[null,msg];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":240,"y":5660,"wires":[["0b2b2c6a0dd6e83f"],["94e69538987cdb84"]]},{"id":"0b2b2c6a0dd6e83f","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Prepare Message","func":"const brightness = msg.averageBrightness;\nconst color_temperature = msg.averageColorTemp;\nconst targetEntityID = flow.get(\"virtualLightID\");\n\nlet jsonData;\n\nif (brightness == 0 || isNaN(color_temperature)){\n    jsonData = `{\"brightness\":${brightness}}`;\n    node.send([null,{targetEntityID, JSON: jsonData }]);\n    node.done();\n}else{\n    jsonData = `{\"brightness\":${brightness},\"kelvin\":${color_temperature}}`;\n    node.send([null,{targetEntityID, JSON: jsonData }]);\n    node.done();\n}\n\n\nreturn msg;\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":750,"y":5620,"wires":[["68746d4f9e85d8b3"],["73aefa11b41d70cb"]]},{"id":"68746d4f9e85d8b3","type":"delay","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"","pauseType":"delay","timeout":"750","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":970,"y":5620,"wires":[["4c15b969809d22f4"]]},{"id":"4c15b969809d22f4","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Release Busy State","func":"flow.set(\"lights_OFF_ON_or_ON_OFF_BUSY\", false); // Set the \"busy\" variable to false\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1200,"y":5660,"wires":[[]]},{"id":"68b9ccc0a12ba5b7","type":"api-call-service","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"","server":"13f57a0.20e1386","version":7,"debugenabled":false,"action":"light.turn_on","floorId":[],"areaId":[],"deviceId":[],"entityId":["{{targetEntityID}}"],"labelId":[],"data":"{{{JSON}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"light","service":"turn_on","x":1300,"y":5720,"wires":[["713aa0b3a902a1b0"]]},{"id":"550ebeab27b6da01","type":"delay","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"","pauseType":"delay","timeout":"1000","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":1700,"y":4320,"wires":[["14abb9be49e59fe4"]]},{"id":"ab42e19ba0cb10ec","type":"delay","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"","pauseType":"delay","timeout":"1000","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":540,"y":4760,"wires":[["977dc83a14e2ee04"]]},{"id":"d209f51ec19b31f7","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Set Busy State","func":"flow.set(\"lights_OFF_ON_or_ON_OFF_BUSY\", true); // Set the \"busy\" variable to true\nsetTimeout(() => {\n    flow.set(\"lights_OFF_ON_or_ON_OFF_BUSY\", false);\n}, 4000);\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":220,"y":5540,"wires":[["5df99d44dd4e97c2"]]},{"id":"04f2976e6082af1f","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Set Busy State","func":"flow.set(\"lights_OFF_ON_or_ON_OFF_BUSY\", true); // Set the \"busy\" variable to true\nsetTimeout(() => {\n    flow.set(\"lights_OFF_ON_or_ON_OFF_BUSY\", false);\n}, 4000);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":650,"y":5380,"wires":[["6b3191f2a8cd3d95"]]},{"id":"25265aaa55f53869","type":"function","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"turning ON or OFF?","func":"  // Determine State Change \nlet wasOn = msg.payload.event.old_state.state  === \"on\";\nlet isOn = msg.payload.event.new_state.state  === \"on\";\n  // Prioritize State Change from Off to On\n  if (!wasOn && isOn) {\n    return [msg,null]; \n  } else if(wasOn && !isOn){\n    return [null,msg]; \n  }","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":140,"y":6420,"wires":[["690c9b43757699dc"],["b5ab11b373813ce6"]]},{"id":"690c9b43757699dc","type":"ha-select","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"7a3872aa6f2b2dea","mode":"get","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":410,"y":6360,"wires":[["32b08e433f3d4f05"]]},{"id":"32b08e433f3d4f05","type":"switch","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"Circadian","vt":"str"},{"t":"eq","v":"Away","vt":"str"},{"t":"eq","v":"Sleep","vt":"str"},{"t":"eq","v":"Manual","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":550,"y":6360,"wires":[["4b116537efb6fbe7"],["4b116537efb6fbe7"],[],[]]},{"id":"fb577f254dda4644","type":"function","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"Get Circadian Values","func":"\n\nmsg.circadianValues = { \n    brightness: flow.get(\"currentBrightness\"),\n    color_temp: flow.get(\"currentColorTemperature\")\n};\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1320,"y":6340,"wires":[["0a72b0030ccf0463"]]},{"id":"0a72b0030ccf0463","type":"ha-switch","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"Dynamic Brightness","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"afdc4e7a27220b81","enableInput":true,"outputOnStateChange":false,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":1570,"y":6340,"wires":[["f3f5878f2e1f0b6b"],["b3ea0950cef193c5"]]},{"id":"f3f5878f2e1f0b6b","type":"ha-switch","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"Dynamic Color Temperature","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"e6217b29e753b525","enableInput":true,"outputOnStateChange":false,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":1820,"y":6300,"wires":[["d0fad2f1c9909684"],["cc2640443caf8759"]]},{"id":"d0fad2f1c9909684","type":"function","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"Prepare Message Brightness+CT","func":"const brightness = msg.circadianValues.brightness;\nconst color_temperature = msg.circadianValues.color_temp;\nconst targetEntityID = flow.get(\"virtualLightID\");\n\nlet jsonData;\njsonData = `{\"brightness\":${brightness},\"kelvin\":${color_temperature}}`;\nnode.send([null,{targetEntityID, brightness: brightness, color_temperature: color_temperature, JSON: jsonData }],false);\nnode.done();\n\nconst entityMessages = flow.get(\"entityMessages\") || {};\n\nfor (const entityId in entityMessages) {\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.brightness !== null &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n\n      let jsonData;\n      jsonData = `{\"brightness\":${brightness},\"kelvin\":${color_temperature}}`;\n      node.send([null,{targetEntityID: entityId, brightness: brightness, color_temperature: color_temperature, JSON: jsonData }],false);\n      node.done();\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\n\nconst newMsg = {\n      payload: \"iterate\" // You can customize the payload\n    };\nreturn newMsg;\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2160,"y":6240,"wires":[["9abf7ceff7fed83d"],["ea96c167f18e9a34"]]},{"id":"cc2640443caf8759","type":"function","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"Prepare Message Brightness","func":"const brightness = msg.circadianValues.brightness;\nconst targetEntityID = flow.get(\"virtualLightID\");\n\nlet jsonData;\njsonData = `{\"brightness\":${brightness}}`;\nnode.send([null,{targetEntityID, brightness: brightness, color_temperature: null, JSON: jsonData }],false);\nnode.done();\n\nconst entityMessages = flow.get(\"entityMessages\") || {};\n\nfor (const entityId in entityMessages) {\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.brightness !== null &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n\n      let jsonData;\n      jsonData = `{\"brightness\":${brightness}}`;\n      node.send([null,{targetEntityID: entityId, brightness: brightness, color_temperature: null, JSON: jsonData }],false);\n      node.done();\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\n\nconst newMsg = {\n      payload: \"iterate\" // You can customize the payload\n    };\nreturn newMsg;\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2140,"y":6280,"wires":[["9abf7ceff7fed83d"],["ea96c167f18e9a34"]]},{"id":"b3ea0950cef193c5","type":"ha-switch","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"Dynamic Color Temperature","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"e6217b29e753b525","enableInput":true,"outputOnStateChange":false,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":1820,"y":6340,"wires":[["5ecc81485aecfd8d"],[]]},{"id":"5ecc81485aecfd8d","type":"function","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"Prepare Message CT","func":"const color_temperature = msg.circadianValues.color_temp;\nconst targetEntityID = flow.get(\"virtualLightID\");\n\nlet jsonData;\njsonData = `{\"kelvin\":${color_temperature}}`;\nnode.send([null,{targetEntityID, brightness: null, color_temperature: color_temperature, JSON: jsonData }],false);\nnode.done();\n\nconst entityMessages = flow.get(\"entityMessages\") || {};\n\nfor (const entityId in entityMessages) {\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.brightness !== null &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n\n      let jsonData;\n      jsonData = `{\"kelvin\":${color_temperature}}`;\n      node.send([null,{targetEntityID: entityId, brightness: null, color_temperature: color_temperature, JSON: jsonData }],false);\n      node.done();\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\nconst newMsg = {\n  payload: \"iterate\" // You can customize the payload\n};\nreturn newMsg;\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2120,"y":6320,"wires":[["9abf7ceff7fed83d"],["ea96c167f18e9a34"]]},{"id":"7cfde633758bae64","type":"api-call-service","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"","server":"13f57a0.20e1386","version":7,"debugenabled":false,"action":"light.turn_on","floorId":[],"areaId":[],"deviceId":[],"entityId":["{{targetEntityID}}"],"labelId":[],"data":"{{{JSON}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"light","service":"turn_on","x":2870,"y":6240,"wires":[["4307ce8d1f2655d2"]]},{"id":"af731d8c3ab4784e","type":"trigger","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"","op1":"","op2":"0","op1type":"nul","op2type":"str","duration":"10","extend":false,"overrideDelay":false,"units":"s","reset":"stop","bytopic":"all","topic":"topic","outputs":1,"x":910,"y":6340,"wires":[["8e3d192a358e59e4"]]},{"id":"b5ab11b373813ce6","type":"change","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"stop","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":400,"y":6600,"wires":[["4b116537efb6fbe7","af731d8c3ab4784e"]]},{"id":"f67e2c6c0e8ddfb0","type":"function","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"turning ON or OFF?","func":"  // Determine State Change \nlet wasOn = msg.payload.event.old_state.state  === \"on\";\nlet isOn = msg.payload.event.new_state.state  === \"on\";\n\n  // Prioritize State Change from Off to On\n  if (!wasOn && isOn) {\n    return [msg,null]; \n  } else if(wasOn && !isOn){\n    return [null,msg]; \n  }","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":440,"y":3200,"wires":[[],["e1ba7a4aca68c591"]]},{"id":"e1ba7a4aca68c591","type":"change","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"reset","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":1360,"y":3200,"wires":[["3daa577d4d18ab48"]]},{"id":"c6c79c3bb3d1e532","type":"ha-number","z":"17235fd954b8a4ef","g":"1a6c5f6fd683d681","name":"Circadian Max Color Temperature","version":1,"debugenabled":false,"inputs":0,"outputs":1,"entityConfig":"ef3b15931f4e3eee","mode":"listen","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":720,"y":3600,"wires":[["ed08f08ac897f2ad"]]},{"id":"beef17992f745833","type":"ha-number","z":"17235fd954b8a4ef","g":"1a6c5f6fd683d681","name":"Circadian Min Color Temperature","version":1,"debugenabled":false,"inputs":0,"outputs":1,"entityConfig":"952b82ddd83ce5b8","mode":"listen","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":710,"y":3740,"wires":[["fa37d23b21269ed4"]]},{"id":"ed08f08ac897f2ad","type":"function","z":"17235fd954b8a4ef","g":"1a6c5f6fd683d681","name":"Scale and save circMaxColor_temp","func":"// Get the scaling configuration from flow variables\nlet inputMin =  2000;\nlet inputMax =  6535;\nlet outputMin = 2000;\nlet outputMax = 6535;\n\n// Get the input value from msg.payload\nlet inputValue = Number(msg.payload);\n\n// Clamp the input value to the specified range\ninputValue = Math.max(inputMin, Math.min(inputMax, inputValue));\n\n// Scale the value to the output range\nlet outputValue = ((inputValue - inputMin) / (inputMax - inputMin)) * (outputMax - outputMin) + outputMin;\n\n// Round to the nearest integer if needed\noutputValue = Math.round(outputValue);  // Comment this out if you want floating-point results\n\n// Set the output payload\nmsg.payload = outputValue;\nflow.set(\"circMaxColor_temp\", outputValue);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1060,"y":3600,"wires":[["42752ed0cb1d3246"]]},{"id":"fa37d23b21269ed4","type":"function","z":"17235fd954b8a4ef","g":"1a6c5f6fd683d681","name":"Scale and save circMaxColor_temp","func":"// Get the scaling configuration from flow variables\nlet inputMin = 2000;\nlet inputMax = 6535;\nlet outputMin = 2000;\nlet outputMax = 6535;\n\n// Get the input value from msg.payload\nlet inputValue = Number(msg.payload);\n\n// Clamp the input value to the specified range\ninputValue = Math.max(inputMin, Math.min(inputMax, inputValue));\n\n// Scale the value to the output range\nlet outputValue = ((inputValue - inputMin) / (inputMax - inputMin)) * (outputMax - outputMin) + outputMin;\n\n// Round to the nearest integer if needed\noutputValue = Math.round(outputValue);  // Comment this out if you want floating-point results\n\n// Set the output payload\nmsg.payload = outputValue;\nflow.set(\"circMinColor_temp\", outputValue);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1060,"y":3740,"wires":[["42752ed0cb1d3246"]]},{"id":"2591cbed8b1c95e7","type":"ha-switch","z":"17235fd954b8a4ef","g":"1a6c5f6fd683d681","name":"Dynamic Color Temperature","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"e6217b29e753b525","enableInput":true,"outputOnStateChange":true,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":700,"y":3560,"wires":[["084524566a0b5d2d"],["084524566a0b5d2d"]]},{"id":"084524566a0b5d2d","type":"function","z":"17235fd954b8a4ef","g":"1a6c5f6fd683d681","name":"Changes dynamicColorTempOn","func":"flow.set('dynamicColorTempOn',msg.payload);\n\nmsg.payload = flow.get('dynamicColorTempOn');\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1050,"y":3560,"wires":[[]]},{"id":"8a551b93f977ec13","type":"ha-number","z":"17235fd954b8a4ef","g":"1a6c5f6fd683d681","name":"Circadian Max Color Temperature","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"ef3b15931f4e3eee","mode":"get","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":720,"y":3640,"wires":[["ed08f08ac897f2ad"]]},{"id":"5337c55931fd18aa","type":"ha-number","z":"17235fd954b8a4ef","g":"1a6c5f6fd683d681","name":"Circadian Min Color Temperature","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"952b82ddd83ce5b8","mode":"get","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":710,"y":3700,"wires":[["fa37d23b21269ed4"]]},{"id":"450d1c8b444bfb81","type":"inject","z":"17235fd954b8a4ef","g":"1a6c5f6fd683d681","name":"","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":"0","topic":"","payload":"reset","payloadType":"str","x":490,"y":3660,"wires":[["8a551b93f977ec13","5337c55931fd18aa"]]},{"id":"1733952f3c845a8e","type":"ha-number","z":"17235fd954b8a4ef","g":"0ef52fcd61de7c97","name":"Circadian Max Brightness","version":1,"debugenabled":false,"inputs":0,"outputs":1,"entityConfig":"95bec4fa9ba26c12","mode":"listen","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":690,"y":3300,"wires":[["d13fb54244c298d7"]]},{"id":"d13fb54244c298d7","type":"function","z":"17235fd954b8a4ef","g":"0ef52fcd61de7c97","name":"Scale and save circMaxBrightness","func":"// Get the scaling configuration from flow variables\nlet inputMin =  0;\nlet inputMax =  100;\nlet outputMin = 0;\nlet outputMax = 255;\n\n// Get the input value from msg.payload\nlet inputValue = Number(msg.payload);\n\n// Clamp the input value to the specified range\ninputValue = Math.max(inputMin, Math.min(inputMax, inputValue));\n\n// Scale the value to the output range\nlet outputValue = ((inputValue - inputMin) / (inputMax - inputMin)) * (outputMax - outputMin) + outputMin;\n\n// Round to the nearest integer if needed\noutputValue = Math.round(outputValue);  // Comment this out if you want floating-point results\n\n// Set the output payload\nmsg.payload = outputValue;\nflow.set(\"circMaxBrightness\", outputValue);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1060,"y":3300,"wires":[["f4ce218701082ad4"]]},{"id":"f2d63eb59e4aaac9","type":"ha-number","z":"17235fd954b8a4ef","g":"0ef52fcd61de7c97","name":"Circadian Min Brightness","version":1,"debugenabled":false,"inputs":0,"outputs":1,"entityConfig":"26f878590ab085bd","mode":"listen","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":690,"y":3440,"wires":[["b26ae447a723d3c0"]]},{"id":"b26ae447a723d3c0","type":"function","z":"17235fd954b8a4ef","g":"0ef52fcd61de7c97","name":"Scale and save circMinBrightness","func":"// Get the scaling configuration from flow variables\nlet inputMin =  0;\nlet inputMax =  100;\nlet outputMin = 0;\nlet outputMax = 255;\n\n// Get the input value from msg.payload\nlet inputValue = Number(msg.payload);\n\n// Clamp the input value to the specified range\ninputValue = Math.max(inputMin, Math.min(inputMax, inputValue));\n\n// Scale the value to the output range\nlet outputValue = ((inputValue - inputMin) / (inputMax - inputMin)) * (outputMax - outputMin) + outputMin;\n\n// Round to the nearest integer if needed\noutputValue = Math.round(outputValue);  // Comment this out if you want floating-point results\n\n// Set the output payload\nmsg.payload = outputValue;\nflow.set(\"circMinBrightness\", outputValue);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1060,"y":3440,"wires":[["f4ce218701082ad4"]]},{"id":"cfa347dac317db45","type":"function","z":"17235fd954b8a4ef","g":"0ef52fcd61de7c97","name":"Changes dynamicBrightnessOn","func":"flow.set('dynamicBrightnessOn',msg.payload);\n\nmsg.payload = flow.get('dynamicBrightnessOn');\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1060,"y":3260,"wires":[[]]},{"id":"951e4a4b211a983d","type":"ha-switch","z":"17235fd954b8a4ef","g":"0ef52fcd61de7c97","name":"Dynamic Brightness","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"afdc4e7a27220b81","enableInput":true,"outputOnStateChange":true,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":680,"y":3260,"wires":[["cfa347dac317db45"],["cfa347dac317db45"]]},{"id":"b8c9151c63b5ae3a","type":"ha-number","z":"17235fd954b8a4ef","g":"0ef52fcd61de7c97","name":"Circadian Max Brightness","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"95bec4fa9ba26c12","mode":"get","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":690,"y":3340,"wires":[["d13fb54244c298d7"]]},{"id":"3bbe951e04711d8a","type":"ha-number","z":"17235fd954b8a4ef","g":"0ef52fcd61de7c97","name":"Circadian Min Brightness","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"26f878590ab085bd","mode":"get","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":690,"y":3400,"wires":[["b26ae447a723d3c0"]]},{"id":"7fa8a6ff3c9268c4","type":"inject","z":"17235fd954b8a4ef","g":"0ef52fcd61de7c97","name":"","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":"0","topic":"","payload":"reset","payloadType":"str","x":490,"y":3360,"wires":[["b8c9151c63b5ae3a","3bbe951e04711d8a"]]},{"id":"f4ce218701082ad4","type":"api-current-state","z":"17235fd954b8a4ef","g":"0ef52fcd61de7c97","name":"","server":"13f57a0.20e1386","version":3,"outputs":2,"halt_if":"off","halt_if_type":"str","halt_if_compare":"is","entity_id":"{{flow.virtualLightID}}","state_type":"str","blockInputOverrides":false,"outputProperties":[],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":1060,"y":3360,"wires":[["e1ba7a4aca68c591"],[]]},{"id":"42752ed0cb1d3246","type":"api-current-state","z":"17235fd954b8a4ef","g":"1a6c5f6fd683d681","name":"","server":"13f57a0.20e1386","version":3,"outputs":2,"halt_if":"off","halt_if_type":"str","halt_if_compare":"is","entity_id":"{{flow.virtualLightID}}","state_type":"str","blockInputOverrides":false,"outputProperties":[],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":1060,"y":3660,"wires":[["e1ba7a4aca68c591"],[]]},{"id":"26a8d3df1fa61795","type":"function","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"Verify if busy.","func":"let busy1 = flow.get(\"update_master_when_lights_change_BUSY\"); // Get the current value of \"busy\"\nlet busy2 = flow.get(\"lights_OFF_ON_or_ON_OFF_BUSY\");\nlet busy3 = flow.get(\"update_lights_when_master_changes_BUSY\");\nlet busy4 = flow.get(\"master_OFF_ON_or_ON_OFF_BUSY\");\nlet busy5 = flow.get(\"circadian_iterator_BUSY\");\nif (busy2 || busy4 || busy5) { // Check if busy is true\n    // Do nothing\n} else {\n    return msg; \n}","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":390,"y":1080,"wires":[["2ecf9f0a06126687"]]},{"id":"2ecf9f0a06126687","type":"api-current-state","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"","server":"13f57a0.20e1386","version":3,"outputs":2,"halt_if":"on","halt_if_type":"str","halt_if_compare":"is","entity_id":"{{flow.virtualLightID}}","state_type":"str","blockInputOverrides":false,"outputProperties":[],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":320,"y":1140,"wires":[["a67e63c9dc9279a5"],[]]},{"id":"07d6a84b85fd4afb","type":"function","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"CT Changed?","func":"let newKelvin = msg.payload.event.new_state.attributes.color_temp_kelvin || null;\nlet oldKelvin = msg.payload.event.old_state.attributes.color_temp_kelvin || null;\n\nlet kelvinTolerance = flow.get(\"kelvinTolerance\");\n\n\nif(Math.abs(newKelvin - oldKelvin) >= kelvinTolerance){\n    node.send([null, {enable: false}]);\n    node.done();\n}\n\nreturn msg\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1100,"y":1080,"wires":[["7049f2d6c7118f37","144ce447d4d48576"],["f5c2f9b0d81bf07c"]]},{"id":"66a9e23f76f84fc6","type":"ha-switch","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"Dynamic Brightness","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"afdc4e7a27220b81","enableInput":true,"outputOnStateChange":false,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":870,"y":1140,"wires":[[],[]]},{"id":"f5c2f9b0d81bf07c","type":"ha-switch","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"Dynamic Color Temperature","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"e6217b29e753b525","enableInput":true,"outputOnStateChange":false,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":1160,"y":1140,"wires":[[],[]]},{"id":"7049f2d6c7118f37","type":"ha-switch","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"Dynamic Brightness","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"afdc4e7a27220b81","enableInput":true,"outputOnStateChange":true,"outputProperties":[],"x":1450,"y":1080,"wires":[[],["2dc4a4015566b66e"]]},{"id":"2dc4a4015566b66e","type":"ha-switch","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"Dynamic Color Temperature","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"e6217b29e753b525","enableInput":true,"outputOnStateChange":false,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":1700,"y":1080,"wires":[[],["48eb39bb1c190cf5"]]},{"id":"144ce447d4d48576","type":"ha-switch","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"Dynamic Color Temperature","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"e6217b29e753b525","enableInput":true,"outputOnStateChange":true,"outputProperties":[],"x":1480,"y":1160,"wires":[[],["9cc6cebd572d1f8e"]]},{"id":"9cc6cebd572d1f8e","type":"ha-switch","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"Dynamic Brightness","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"afdc4e7a27220b81","enableInput":true,"outputOnStateChange":false,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":1730,"y":1160,"wires":[[],["48eb39bb1c190cf5"]]},{"id":"c400757161d62235","type":"ha-select","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"7a3872aa6f2b2dea","mode":"get","value":"payload","valueType":"msg","outputProperties":[{"property":"mode","propertyType":"msg","value":"","valueType":"value"}],"x":630,"y":1080,"wires":[["10c78983cc115b11"]]},{"id":"10c78983cc115b11","type":"switch","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"","property":"mode","propertyType":"msg","rules":[{"t":"eq","v":"Circadian","vt":"str"},{"t":"eq","v":"Away","vt":"str"},{"t":"eq","v":"Sleep","vt":"str"},{"t":"eq","v":"Manual","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":630,"y":1160,"wires":[["3aadd3e8d5200ff8"],[],[],[]]},{"id":"6e80d2a0ada74480","type":"ha-switch","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"Dynamic Brightness","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"afdc4e7a27220b81","enableInput":true,"outputOnStateChange":true,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":2290,"y":1160,"wires":[[],[]]},{"id":"48eb39bb1c190cf5","type":"change","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"Manual","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":2020,"y":1080,"wires":[["e81f85208082e4c2"]]},{"id":"e81f85208082e4c2","type":"ha-select","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"7a3872aa6f2b2dea","mode":"set","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":1990,"y":1140,"wires":[["0a795324376ea08d"]]},{"id":"0a795324376ea08d","type":"change","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"","rules":[{"t":"set","p":"enable","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":2000,"y":1200,"wires":[["9f7e8028dafead94","6e80d2a0ada74480"]]},{"id":"9f7e8028dafead94","type":"ha-switch","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"Dynamic Color Temperature","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"e6217b29e753b525","enableInput":true,"outputOnStateChange":true,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":2320,"y":1080,"wires":[[],[]]},{"id":"a67e63c9dc9279a5","type":"function","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"Change during ON?","func":"  // Determine State Change \nlet wasOn = msg.payload.event.old_state.state  === \"on\";\nlet isOn = msg.payload.event.new_state.state  === \"on\";\n\n  // Prioritize State Change from Off to On\n  if (wasOn && isOn) {\n    return [msg,null]; \n  } else {\n    return [null,msg]; \n  }","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":360,"y":1200,"wires":[["c400757161d62235"],[]]},{"id":"3aadd3e8d5200ff8","type":"function","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"Brightness Changed?","func":"let newBrightness = msg.payload.event.new_state.attributes.brightness || 0;\nlet oldBrightness = msg.payload.event.old_state.attributes.brightness || 0;\nlet brightnessTolerance = flow.get(\"brightnessTolerance\");\n\n\nif (Math.abs(newBrightness - oldBrightness) >= brightnessTolerance){\n    node.send([null, {enable: false}]);\n    node.done();\n}\nreturn msg\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":860,"y":1080,"wires":[["07d6a84b85fd4afb"],["66a9e23f76f84fc6"]]},{"id":"23db8d1fbb9e8486","type":"function","z":"17235fd954b8a4ef","g":"7af13a48ec044dbb","name":"Verify if busy","func":"let busy1 = flow.get(\"update_master_when_lights_change_BUSY\"); // Get the current value of \"busy\"\nlet busy2 = flow.get(\"lights_OFF_ON_or_ON_OFF_BUSY\");\nlet busy4 = flow.get(\"master_OFF_ON_or_ON_OFF_BUSY\");\nlet busy5 = flow.get(\"circadian_iterator_BUSY\");\nif (busy1 || busy2 || busy4 || busy5) { // Check if busy is true\n    // Do nothing\n} else {\n    return msg; \n}","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":350,"y":5000,"wires":[["b099cb2a1fba359e"]]},{"id":"b099cb2a1fba359e","type":"api-current-state","z":"17235fd954b8a4ef","g":"7af13a48ec044dbb","name":"","server":"13f57a0.20e1386","version":3,"outputs":2,"halt_if":"on","halt_if_type":"str","halt_if_compare":"is","entity_id":"{{flow.virtualLightID}}","state_type":"str","blockInputOverrides":false,"outputProperties":[],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":280,"y":5060,"wires":[["0ef1077d7fe7304f"],[]]},{"id":"0ef1077d7fe7304f","type":"function","z":"17235fd954b8a4ef","g":"7af13a48ec044dbb","name":"Change during ON?","func":"  // Determine State Change \nlet wasOn = msg.payload.event.old_state.state  === \"on\";\nlet isOn = msg.payload.event.new_state.state  === \"on\";\n\n  // Prioritize State Change from Off to On\n  if (wasOn && isOn) {\n    return [msg,null]; \n  } else {\n    return [null,msg]; \n  }","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":320,"y":5120,"wires":[["56ba0b558207a643"],[]]},{"id":"8fd26a547eddc5f1","type":"function","z":"17235fd954b8a4ef","g":"7af13a48ec044dbb","name":"Get Master Values","func":"let newBrightness = msg.payload.event.new_state.attributes.brightness;\nlet newKelvin = msg.payload.event.new_state.attributes.color_temp_kelvin;\n\n//newmsg.brightness = newBrightness;\n//newmsg.colorTemp = newKelvin;\nreturn {brightness: newBrightness,colorTemp: newKelvin};","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":970,"y":5020,"wires":[["28565d9e7624a6bf"]]},{"id":"28565d9e7624a6bf","type":"function","z":"17235fd954b8a4ef","g":"7af13a48ec044dbb","name":"Send Values to Lights","func":"const brightness = msg.brightness;\nconst color_temperature = msg.colorTemp;\n\nconst entityMessages = flow.get(\"entityMessages\") || {};\n\nfor (const entityId in entityMessages) {\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.brightness !== null &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n\n      let jsonData;\n      jsonData = `{\"brightness\":${brightness},\"kelvin\":${color_temperature}}`;\n      node.send([null,{entityId, JSON: jsonData }]);\n      node.done();\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\n\n\nreturn msg;","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1200,"y":5020,"wires":[["5cb7c68f74497355"],["f7af962b48b5e9a8"]]},{"id":"54e188e09ec8c881","type":"api-call-service","z":"17235fd954b8a4ef","g":"7af13a48ec044dbb","name":"","server":"13f57a0.20e1386","version":7,"debugenabled":false,"action":"light.turn_on","floorId":[],"areaId":[],"deviceId":[],"entityId":["{{entityId}}"],"labelId":[],"data":"{{{JSON}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"light","service":"turn_on","x":1650,"y":5060,"wires":[["216ddf4e879ea40f"]]},{"id":"2d1d545cfd877983","type":"function","z":"17235fd954b8a4ef","g":"dcfb9f8cdf58735d","name":"Verify if busy","func":"let busy2 = flow.get(\"lights_OFF_ON_or_ON_OFF_BUSY\"); // Get the current value of \"busy\"\nlet busy3 = flow.get(\"update_lights_when_master_changes_BUSY\");\nlet busy4 = flow.get(\"master_OFF_ON_or_ON_OFF_BUSY\");\nlet busy5 = flow.get(\"circadian_iterator_BUSY\");\nif (busy2 || busy3 || busy4 || busy5) { // Check if busy is true\n    // Do nothing\n} else {\n    return msg; \n}","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":270,"y":5960,"wires":[["baab70ffa30b0696"]]},{"id":"baab70ffa30b0696","type":"function","z":"17235fd954b8a4ef","g":"dcfb9f8cdf58735d","name":"Change during ON?","func":"  // Determine State Change \nlet wasOn = msg.data.old_state.state  === \"on\";\nlet isOn = msg.data.new_state.state  === \"on\";\n\n  // Prioritize State Change from Off to On\n  if (wasOn && isOn) {\n    return [msg,null]; \n  } else {\n    return [null,msg]; \n  }","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":240,"y":6020,"wires":[["f88fa09ab7ec68d8"],[]]},{"id":"896a3e4fb667937a","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Average Brightness","func":"const entityMessages = flow.get(\"entityMessages\") || {};\nconst currentEntityId = msg.data.new_state.entity_id;\nconst currentEntityIdTargetBrightness = msg.circadianValues.brightness;\n\nlet totalBrightness = 0;\nlet entityCount = 0;\n\nfor (const entityId in entityMessages) {\n\n  if (entityId === currentEntityId) {\n    continue;\n  }\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.brightness !== null &&\n        message.new_state.state !== \"unavailable\") {\n\n      totalBrightness += message.new_state.attributes.brightness;\n      entityCount++;\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\n\nlet averageBrightness = Math.floor((totalBrightness+currentEntityIdTargetBrightness) / (entityCount+1));\nmsg.averageBrightness = averageBrightness;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1460,"y":5380,"wires":[["148e27949a2798da"]]},{"id":"11953829a3eb3833","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Average CT","func":"const entityMessages = flow.get(\"entityMessages\") || {};\nconst currentEntityId = msg.data.new_state.entity_id;\nconst currentEntityIdTargetColorTemp = msg.circadianValues.color_temp;\n\nlet totalColorTemp = 0;\nlet entityCount = 0;\n\nfor (const entityId in entityMessages) {\n\n  if (entityId === currentEntityId) {\n    continue;\n  }\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.color_temp_kelvin !== null &&\n        message.new_state.state !== \"unavailable\") {\n\n      totalColorTemp += message.new_state.attributes.color_temp_kelvin;\n      entityCount++;\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\n\nlet averageColorTemp = Math.floor((totalColorTemp+currentEntityIdTargetColorTemp) / (entityCount+1));\n\nmsg.averageColorTemp = averageColorTemp;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1850,"y":5380,"wires":[["546eef753619bb58"]]},{"id":"f88fa09ab7ec68d8","type":"function","z":"17235fd954b8a4ef","g":"dcfb9f8cdf58735d","name":"Set Busy State","func":"flow.set(\"update_master_when_lights_change_BUSY\", true); // Set the \"busy\" variable to true\nsetTimeout(() => {\n    flow.set(\"update_master_when_lights_change_BUSY\", false);\n}, 4000);\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":260,"y":6080,"wires":[["a9ab9483abc881eb"]]},{"id":"56ba0b558207a643","type":"function","z":"17235fd954b8a4ef","g":"7af13a48ec044dbb","name":"Set Busy State","func":"flow.set(\"update_lights_when_master_changes_BUSY\", true); // Set the \"busy\" variable to true\nsetTimeout(() => {\n    flow.set(\"update_lights_when_master_changes_BUSY\", false);\n}, 4000);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":340,"y":5180,"wires":[["96119fe07c82d039"]]},{"id":"5cb7c68f74497355","type":"delay","z":"17235fd954b8a4ef","g":"7af13a48ec044dbb","name":"","pauseType":"delay","timeout":"750","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":1470,"y":4980,"wires":[["46d46bf0600cf6df"]]},{"id":"46d46bf0600cf6df","type":"function","z":"17235fd954b8a4ef","g":"7af13a48ec044dbb","name":"Release Busy State","func":"flow.set(\"update_lights_when_master_changes_BUSY\", false); // Set the \"busy\" variable to false\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1700,"y":4980,"wires":[[]]},{"id":"485b3da57dd2cfbc","type":"function","z":"17235fd954b8a4ef","g":"dcfb9f8cdf58735d","name":"Release Busy State","func":"flow.set(\"update_master_when_lights_change_BUSY\", false); // Set the \"busy\" variable to false\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1660,"y":5960,"wires":[[]]},{"id":"c5357ecdac306879","type":"ha-select","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"","version":1,"debugenabled":false,"inputs":0,"outputs":1,"entityConfig":"7a3872aa6f2b2dea","mode":"listen","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":390,"y":6420,"wires":[["03de50ac8e192998"]]},{"id":"8d1d875e18da7317","type":"switch","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"Circadian","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":390,"y":6540,"wires":[["f6edebf50ad2bdbe"],["b5ab11b373813ce6"]]},{"id":"f6edebf50ad2bdbe","type":"api-current-state","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"","server":"13f57a0.20e1386","version":3,"outputs":2,"halt_if":"on","halt_if_type":"str","halt_if_compare":"is","entity_id":"{{flow.virtualLightID}}","state_type":"str","blockInputOverrides":false,"outputProperties":[],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":840,"y":6500,"wires":[["8e3d192a358e59e4"],[]]},{"id":"a9ab9483abc881eb","type":"function","z":"17235fd954b8a4ef","g":"dcfb9f8cdf58735d","name":"Average Brightness","func":"const entityMessages = flow.get(\"entityMessages\") || {};\n\nlet totalBrightness = 0;\nlet entityCount = 0;\n\nfor (const entityId in entityMessages) {\n\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.brightness !== null &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n\n      totalBrightness += message.new_state.attributes.brightness;\n      entityCount++;\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\n\nlet averageBrightness = Math.floor((totalBrightness) / (entityCount));\nmsg.averageBrightness = averageBrightness;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":580,"y":5960,"wires":[["2c8edf118c754fc0"]]},{"id":"2c8edf118c754fc0","type":"function","z":"17235fd954b8a4ef","g":"dcfb9f8cdf58735d","name":"Color Mode?","func":"\nconst entityMessages = flow.get(\"entityMessages\") || {};\n\nlet colorModeFlag = false;\n\nfor (const entityId in entityMessages) {\n\n  \n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.color_mode !== \"color_temp\" &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n      colorModeFlag = true;\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\n\n//let averageBrightness;\nif(colorModeFlag){\n  return [null,msg];\n}else{\n  return [msg, null];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":790,"y":5960,"wires":[["c727e429035ba289"],["62e9a19e11f1a8aa"]]},{"id":"c727e429035ba289","type":"function","z":"17235fd954b8a4ef","g":"dcfb9f8cdf58735d","name":"Average CT","func":"const entityMessages = flow.get(\"entityMessages\") || {};\n\nlet totalColorTemp = 0;\nlet entityCount = 0;\n\nfor (const entityId in entityMessages) {\n\n  \n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.color_temp_kelvin !== null &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n\n      totalColorTemp += message.new_state.attributes.color_temp_kelvin;\n      entityCount++;\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\n\nlet averageColorTemp = Math.floor((totalColorTemp) / (entityCount));\n\nmsg.averageColorTemp = averageColorTemp;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":990,"y":5960,"wires":[["f3a387ab6878a6af"]]},{"id":"f3a387ab6878a6af","type":"function","z":"17235fd954b8a4ef","g":"dcfb9f8cdf58735d","name":"Prepare Message","func":"const brightness = msg.averageBrightness;\nconst color_temperature = msg.averageColorTemp;\nconst targetEntityID = flow.get(\"virtualLightID\");\n\nlet jsonData;\njsonData = `{\"brightness\":${brightness},\"kelvin\":${color_temperature}}`;\nnode.send([null,{entityId:targetEntityID, JSON: jsonData }]);\nnode.done();\nreturn msg;\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1210,"y":5960,"wires":[["a86cde33f8fa2147"],["646411b1237fce07"]]},{"id":"a86cde33f8fa2147","type":"delay","z":"17235fd954b8a4ef","g":"dcfb9f8cdf58735d","name":"","pauseType":"delay","timeout":"750","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":1450,"y":5960,"wires":[["485b3da57dd2cfbc"]]},{"id":"07c0a37bc5f96ef0","type":"api-call-service","z":"17235fd954b8a4ef","g":"dcfb9f8cdf58735d","name":"","server":"13f57a0.20e1386","version":7,"debugenabled":false,"action":"light.turn_on","floorId":[],"areaId":[],"deviceId":[],"entityId":["{{entityId}}"],"labelId":[],"data":"{{{JSON}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"light","service":"turn_on","x":1620,"y":6060,"wires":[["f0d93ee93785e4ed"]]},{"id":"bcfa4ee23f68860b","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Average Brightness","func":"const entityMessages = flow.get(\"entityMessages\") || {};\n\nlet totalBrightness = 0;\nlet entityCount = 0;\n\nfor (const entityId in entityMessages) {\n\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.brightness !== null &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n\n      totalBrightness += message.new_state.attributes.brightness;\n      entityCount++;\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\n\nlet averageBrightness = Math.floor((totalBrightness) / (entityCount));\nmsg.averageBrightness = averageBrightness;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":880,"y":5560,"wires":[["33c07c6e7d56f001"]]},{"id":"33c07c6e7d56f001","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Color Mode?","func":"\nconst entityMessages = flow.get(\"entityMessages\") || {};\n\nlet colorModeFlag = false;\n\nfor (const entityId in entityMessages) {\n\n  \n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.color_mode !== \"color_temp\" &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n      colorModeFlag = true;\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\n\n//let averageBrightness;\nif(colorModeFlag){\n  return [null,msg];\n}else{\n  return [msg, null];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1090,"y":5560,"wires":[["8b8db91fd928a1f8"],["eae53b9c06a9e9c3"]]},{"id":"8b8db91fd928a1f8","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Average CT","func":"const entityMessages = flow.get(\"entityMessages\") || {};\n\nlet totalColorTemp = 0;\nlet entityCount = 0;\n\nfor (const entityId in entityMessages) {\n\n  \n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.color_temp_kelvin !== null &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n\n      totalColorTemp += message.new_state.attributes.color_temp_kelvin;\n      entityCount++;\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\n\nlet averageColorTemp = Math.floor((totalColorTemp) / (entityCount));\n\nmsg.averageColorTemp = averageColorTemp;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1270,"y":5540,"wires":[["46094a6f57505f94"]]},{"id":"46094a6f57505f94","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Prepare Message","func":"const brightness = msg.averageBrightness;\nconst color_temperature = msg.averageColorTemp;\nconst targetEntityID = flow.get(\"virtualLightID\");\n\nlet jsonData;\njsonData = `{\"brightness\":${brightness},\"kelvin\":${color_temperature}}`;\nnode.send([null,{entityId:targetEntityID, JSON: jsonData }]);\nnode.done();\nreturn msg;\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1470,"y":5540,"wires":[["04296cb54b9393cd"],["1a743ba9715a437b"]]},{"id":"04296cb54b9393cd","type":"delay","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"","pauseType":"delay","timeout":"750","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":1710,"y":5560,"wires":[["76d5749a80e5d699"]]},{"id":"76d5749a80e5d699","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Release Busy State","func":"flow.set(\"lights_OFF_ON_or_ON_OFF_BUSY\", false); // Set the \"busy\" variable to false\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1920,"y":5560,"wires":[[]]},{"id":"5bf6c42ff0644f1d","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Set Busy State","func":"flow.set(\"lights_OFF_ON_or_ON_OFF_BUSY\", true); // Set the \"busy\" variable to true\nsetTimeout(() => {\n    flow.set(\"lights_OFF_ON_or_ON_OFF_BUSY\", false);\n}, 4000);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":580,"y":5560,"wires":[["bcfa4ee23f68860b"]]},{"id":"02dc5561b78f845e","type":"ha-select","z":"17235fd954b8a4ef","g":"53ccd140d3a481cb","name":"Default Mode","version":1,"debugenabled":false,"inputs":0,"outputs":1,"entityConfig":"cd030f73a48c73bf","mode":"listen","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValua","propertyType":"msg","value":"","valueType":"previousValue"}],"x":130,"y":720,"wires":[["6ec442af408e115c"]]},{"id":"6ec442af408e115c","type":"api-current-state","z":"17235fd954b8a4ef","g":"53ccd140d3a481cb","name":"","server":"13f57a0.20e1386","version":3,"outputs":2,"halt_if":"off","halt_if_type":"str","halt_if_compare":"is","entity_id":"{{flow.virtualLightID}}","state_type":"str","blockInputOverrides":false,"outputProperties":[],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":400,"y":720,"wires":[["b7cce059f10f4d29"],[]]},{"id":"b7cce059f10f4d29","type":"ha-select","z":"17235fd954b8a4ef","g":"53ccd140d3a481cb","name":"Mode Select","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"7a3872aa6f2b2dea","mode":"set","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValua","propertyType":"msg","value":"","valueType":"previousValue"}],"x":670,"y":720,"wires":[[]]},{"id":"cbecd026218cc07a","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Set Busy State","func":"flow.set(\"master_OFF_ON_or_ON_OFF_BUSY\", true); // Set the \"busy\" variable to true\nsetTimeout(() => {\n    flow.set(\"master_OFF_ON_or_ON_OFF_BUSY\", false);\n}, 4000);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":760,"y":4380,"wires":[["da4178657dbdb6d4"]]},{"id":"da4178657dbdb6d4","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Set Sleep Values and Send Values to Lights","func":"const entityMessages = flow.get(\"entityMessages\");\nconst brightness = 1;\nconst color = [255,0,0];\n\nfor (const entityId in entityMessages) {\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n\n    let jsonData;\n    jsonData = `{\"brightness\":${brightness},\"rgb_color\":${JSON.stringify(color)}}`;\n    node.send([null,{ entityId, JSON: jsonData ,state: \"on\",brightness: brightness, rgb_color: color }]);\n    node.done();\n  }\n}\n\nreturn msg;","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1050,"y":4380,"wires":[["bd070b659deca28e"],["b320cac4dbf8485d"]]},{"id":"bd070b659deca28e","type":"delay","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"","pauseType":"delay","timeout":"750","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":1460,"y":4600,"wires":[["6af2c5c9d6b7eddd"]]},{"id":"6af2c5c9d6b7eddd","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Release Busy State","func":"flow.set(\"master_OFF_ON_or_ON_OFF_BUSY\", false); // Set the \"busy\" variable to false\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1700,"y":4600,"wires":[[]]},{"id":"858b2c12bfdd913e","type":"api-call-service","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"","server":"13f57a0.20e1386","version":7,"debugenabled":false,"action":"light.turn_on","floorId":[],"areaId":[],"deviceId":[],"entityId":["{{entityId}}"],"labelId":[],"data":"{{{JSON}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"light","service":"turn_on","x":770,"y":4820,"wires":[["6677f5ea2efcd6e8"]]},{"id":"531ecac57731df3d","type":"api-call-service","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"","server":"13f57a0.20e1386","version":7,"debugenabled":false,"action":"light.turn_on","floorId":[],"areaId":[],"deviceId":[],"entityId":["{{entityId}}"],"labelId":[],"data":"{{{JSON}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"light","service":"turn_on","x":1510,"y":4380,"wires":[["9ae84e042bf3d9e8"]]},{"id":"099fbd4e26a948c5","type":"api-call-service","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"","server":"13f57a0.20e1386","version":7,"debugenabled":false,"action":"light.turn_on","floorId":[],"areaId":[],"deviceId":[],"entityId":["{{entityId}}"],"labelId":[],"data":"{{{JSON}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"light","service":"turn_on","x":1500,"y":4700,"wires":[["97efd3a6310e0fb2"]]},{"id":"eae53b9c06a9e9c3","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Average RGB","func":"const entityMessages = flow.get(\"entityMessages\") || {};\n\nlet totalR = 0;\nlet totalG = 0;\nlet totalB = 0;\nlet entityCount = 0;\n\nfor (const entityId in entityMessages) {\n  \n  \n  const messages = entityMessages[entityId];\n  \n  for (const message of messages) {\n    \n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.rgb_color != null &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n       \n\n      totalR += message.new_state.attributes.rgb_color[0];\n      totalG += message.new_state.attributes.rgb_color[1];\n      totalB += message.new_state.attributes.rgb_color[2];\n      entityCount++;\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\n\nlet averageR = Math.floor((totalR) / (entityCount));\nlet averageG = Math.floor((totalG) / (entityCount));\nlet averageB = Math.floor((totalB) / (entityCount));\n\nmsg.averageRGB = [averageR, averageG, averageB];\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1280,"y":5620,"wires":[["cafbdb2efec89092"]]},{"id":"cafbdb2efec89092","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Prepare Message","func":"const brightness = msg.averageBrightness;\nconst color = msg.averageRGB;\nconst targetEntityID = flow.get(\"virtualLightID\");\n\nlet jsonData;\n    jsonData = `{\"brightness\":${brightness},\"rgb_color\":${JSON.stringify(color)}}`;\n    node.send([null,{ entityId:targetEntityID, JSON: jsonData ,state: \"on\",brightness: brightness, rgb_color: color }]);\n    node.done();\nreturn msg;\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1470,"y":5620,"wires":[["04296cb54b9393cd"],["1a743ba9715a437b"]]},{"id":"8f1e14bc5f1de332","type":"function","z":"17235fd954b8a4ef","g":"7af13a48ec044dbb","name":"Get Master Values","func":"let newBrightness = msg.payload.event.new_state.attributes.brightness;\nlet newRGB = msg.payload.event.new_state.attributes.rgb_color;\n\n\nreturn {brightness: newBrightness,RGB: newRGB};","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":970,"y":5060,"wires":[["99359e00de42194c"]]},{"id":"99359e00de42194c","type":"function","z":"17235fd954b8a4ef","g":"7af13a48ec044dbb","name":"Send Values to Lights","func":"const brightness = msg.brightness;\nconst entityMessages = flow.get(\"entityMessages\") || {};\nconst color = msg.RGB;\n\nfor (const entityId in entityMessages) {\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.brightness !== null &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n      let jsonData;\n      jsonData = `{\"brightness\":${brightness},\"rgb_color\":${JSON.stringify(color)}}`;\n      node.send([null,{ entityId, JSON: jsonData ,state: \"on\",brightness: brightness, rgb_color: color }]);\n      node.done();\n      //break;\n    }\n  }\n}\n\nreturn msg;","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1200,"y":5060,"wires":[["5cb7c68f74497355"],["f7af962b48b5e9a8"]]},{"id":"62e9a19e11f1a8aa","type":"function","z":"17235fd954b8a4ef","g":"dcfb9f8cdf58735d","name":"Average RGB","func":"const entityMessages = flow.get(\"entityMessages\") || {};\n\nlet totalR = 0;\nlet totalG = 0;\nlet totalB = 0;\nlet entityCount = 0;\n\nfor (const entityId in entityMessages) {\n  \n  \n  const messages = entityMessages[entityId];\n  \n  for (const message of messages) {\n    \n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.rgb_color != null &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n       \n\n      totalR += message.new_state.attributes.rgb_color[0];\n      totalG += message.new_state.attributes.rgb_color[1];\n      totalB += message.new_state.attributes.rgb_color[2];\n      entityCount++;\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\n\nlet averageR = Math.floor((totalR) / (entityCount));\nlet averageG = Math.floor((totalG) / (entityCount));\nlet averageB = Math.floor((totalB) / (entityCount));\n\nmsg.averageRGB = [averageR, averageG, averageB];\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1000,"y":6020,"wires":[["3a3ad6e0b456c029"]]},{"id":"3a3ad6e0b456c029","type":"function","z":"17235fd954b8a4ef","g":"dcfb9f8cdf58735d","name":"Prepare Message","func":"const brightness = msg.averageBrightness;\nconst color = msg.averageRGB;\nconst targetEntityID = flow.get(\"virtualLightID\");\n\nlet jsonData;\n    jsonData = `{\"brightness\":${brightness},\"rgb_color\":${JSON.stringify(color)}}`;\n    node.send([null,{ entityId:targetEntityID, JSON: jsonData ,state: \"on\",brightness: brightness, rgb_color: color }]);\nnode.done();\nreturn msg;\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1210,"y":6020,"wires":[["a86cde33f8fa2147"],["646411b1237fce07"]]},{"id":"f3dc391c2266e9f0","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Average RGB","func":"const entityMessages = flow.get(\"entityMessages\") || {};\n\nlet totalR = 0;\nlet totalG = 0;\nlet totalB = 0;\nlet entityCount = 0;\n\nfor (const entityId in entityMessages) {\n    \n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    \n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.rgb_color != null &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n       \n\n      totalR += message.new_state.attributes.rgb_color[0];\n      totalG += message.new_state.attributes.rgb_color[1];\n      totalB += message.new_state.attributes.rgb_color[2];\n      entityCount++;\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\n\nlet averageR = Math.floor((totalR) / (entityCount));\nlet averageG = Math.floor((totalG) / (entityCount));\nlet averageB = Math.floor((totalB) / (entityCount));\n\nmsg.averageRGB = [averageR, averageG, averageB];\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":740,"y":5720,"wires":[["244cd3a64a2f8b3b"]]},{"id":"244cd3a64a2f8b3b","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Prepare Message","func":"const brightness = msg.averageBrightness;\nconst color = msg.averageRGB;\nconst targetEntityID = flow.get(\"virtualLightID\");\n\nlet jsonData;\n    jsonData = `{\"brightness\":${brightness},\"rgb_color\":${JSON.stringify(color)}}`;\n    node.send([null,{ targetEntityID, JSON: jsonData ,state: \"on\",brightness: brightness, rgb_color: color }]);\nnode.done();\nreturn msg;\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":750,"y":5660,"wires":[["68746d4f9e85d8b3"],["73aefa11b41d70cb"]]},{"id":"30acb4e7d9b2412f","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Set Busy State","func":"flow.set(\"lights_OFF_ON_or_ON_OFF_BUSY\", true); // Set the \"busy\" variable to true\nsetTimeout(() => {\n    flow.set(\"lights_OFF_ON_or_ON_OFF_BUSY\", false);\n}, 4000);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":650,"y":5460,"wires":[["34c1e1855b5c7e5c"]]},{"id":"34c1e1855b5c7e5c","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Set Sleep Values and Send","func":"\n\nconst brightness = 1;\nconst color = [255,0,0];\nconst targetEntityID = msg.data.entity_id;\n\nlet jsonData;\njsonData = `{\"brightness\":${brightness},\"rgb_color\":${JSON.stringify(color)}}`;\nnode.send([null,{ entityId:targetEntityID, JSON: jsonData ,state: \"on\",brightness: brightness, rgb_color: color }]);\nnode.done();\nreturn msg;\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":920,"y":5460,"wires":[["bcfa4ee23f68860b"],["9e5e7c330b482df2"]]},{"id":"fbe5034076d3c527","type":"api-call-service","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"","server":"13f57a0.20e1386","version":7,"debugenabled":false,"action":"light.turn_on","floorId":[],"areaId":[],"deviceId":[],"entityId":["{{entityId}}"],"labelId":[],"data":"{{{JSON}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"light","service":"turn_on","x":1260,"y":5500,"wires":[["9a25684ca272c455"]]},{"id":"7bbfab46332b92da","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Set Busy State","func":"flow.set(\"master_OFF_ON_or_ON_OFF_BUSY\", true); // Set the \"busy\" variable to true\nsetTimeout(() => {\n    flow.set(\"master_OFF_ON_or_ON_OFF_BUSY\", false);\n}, 4000);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":780,"y":4440,"wires":[["97f296a5c9b75845"]]},{"id":"581f9497494c76e1","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Get Master Values","func":"let newBrightness = msg.payload.event.new_state.attributes.brightness;\nlet newKelvin = msg.payload.event.new_state.attributes.color_temp_kelvin;\n\n//newmsg.brightness = newBrightness;\n//newmsg.colorTemp = newKelvin;\nreturn {brightness: newBrightness,colorTemp: newKelvin};","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":870,"y":4540,"wires":[["7b47d2f8be0d0cc1"]]},{"id":"7b47d2f8be0d0cc1","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Send Values to Lights","func":"const brightness = msg.brightness;\nconst color_temperature = msg.colorTemp;\n\nconst entityMessages = flow.get(\"entityMessages\") || {};\n\nfor (const entityId in entityMessages) {\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n      let jsonData;\n      jsonData = `{\"brightness\":${brightness},\"kelvin\":${color_temperature}}`;\n      node.send([null,{entityId, JSON: jsonData }]);\n      node.done();\n      break; // Exit inner loop after finding brightness\n   }\n  }\n\nreturn msg;","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1100,"y":4540,"wires":[["bd070b659deca28e"],["b320cac4dbf8485d"]]},{"id":"97f296a5c9b75845","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Color Mode?","func":"\n//let averageBrightness;\nif(msg.payload.event.new_state.attributes.color_mode !== \"color_temp\"){\n  return [null,msg];\n}else{\n  return [msg, null];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":650,"y":4560,"wires":[["581f9497494c76e1"],["73095b9e180b32d7"]]},{"id":"73095b9e180b32d7","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Get Master Values","func":"let newBrightness = msg.payload.event.new_state.attributes.brightness;\nlet newRGB = msg.payload.event.new_state.attributes.rgb_color;\n\n\nreturn {brightness: newBrightness,RGB: newRGB};","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":870,"y":4580,"wires":[["1615d3372b3f2942"]]},{"id":"1615d3372b3f2942","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Send Values to Lights","func":"const brightness = msg.brightness;\nconst entityMessages = flow.get(\"entityMessages\") || {};\nconst color = msg.RGB;\n\nfor (const entityId in entityMessages) {\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    \n      let jsonData;\n      jsonData = `{\"brightness\":${brightness},\"rgb_color\":${JSON.stringify(color)}}`;\n      node.send([null,{ entityId, JSON: jsonData ,state: \"on\",brightness: brightness, rgb_color: color }]);\n      node.done();\n  }  \n}\n\nreturn msg;","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1100,"y":4580,"wires":[["bd070b659deca28e"],["b320cac4dbf8485d"]]},{"id":"0d4d00ee411b4bcb","type":"function","z":"17235fd954b8a4ef","g":"7af13a48ec044dbb","name":"Color Mode?","func":"\n//let averageBrightness;\nif(msg.payload.event.new_state.attributes.color_mode !== \"color_temp\"){\n  return [null,msg];\n}else{\n  return [msg, null];\n}\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":710,"y":5040,"wires":[["8fd26a547eddc5f1"],["8f1e14bc5f1de332"]]},{"id":"96119fe07c82d039","type":"function","z":"17235fd954b8a4ef","g":"7af13a48ec044dbb","name":"Only Brightness Change?","func":"let color_mode_change = (\n  msg.payload.event.new_state.attributes.color_mode\n  ==\n  msg.payload.event.old_state.attributes.color_mode\n)\n\nlet color_temperature_change = (\n  msg.payload.event.new_state.attributes.color_temp_kelvin\n  ==\n  msg.payload.event.old_state.attributes.color_temp_kelvin\n)\nlet color_change = true;\nif(msg.payload.event.old_state.attributes.color_mode !== \"color_temp\"){\n  color_change =(\n  msg.payload.event.new_state.attributes.hs_color[0]\n  ==\n  msg.payload.event.old_state.attributes.hs_color[0]\n  )\n}\n\n\nlet brightness_change =(\n  msg.payload.event.new_state.attributes.brightness\n  ==\n  msg.payload.event.old_state.attributes.brightness\n)\n\n\nif(\n  color_mode_change && \n  color_temperature_change && \n  color_change &&\n  !brightness_change){\n    return [msg,null];\n}else{\n  return [null,msg];\n}\n\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":670,"y":4980,"wires":[["f197c0cb5c53c338"],["0d4d00ee411b4bcb"]]},{"id":"f197c0cb5c53c338","type":"function","z":"17235fd954b8a4ef","g":"7af13a48ec044dbb","name":"Get Master Values","func":"let newBrightness = msg.payload.event.new_state.attributes.brightness;\n\nreturn {brightness: newBrightness};","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":970,"y":4980,"wires":[["49a336f3d4bf2448"]]},{"id":"49a336f3d4bf2448","type":"function","z":"17235fd954b8a4ef","g":"7af13a48ec044dbb","name":"Send Values to Lights","func":"const brightness = msg.brightness;\n\nconst entityMessages = flow.get(\"entityMessages\") || {};\n\nfor (const entityId in entityMessages) {\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.brightness !== null &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n\n      let jsonData;\n      jsonData = `{\"brightness\":${brightness}}`;\n      node.send([null,{entityId, JSON: jsonData }]);\n      node.done();\n      break; // Exit inner loop after finding brightness\n   }\n  }\n}\n\nreturn msg;","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1200,"y":4980,"wires":[["5cb7c68f74497355"],["f7af962b48b5e9a8"]]},{"id":"546372e614f7ffbe","type":"ha-sensor","z":"17235fd954b8a4ef","d":true,"g":"e4c88bf6451774c7","name":"Brightness","entityConfig":"28c7148b80d3df07","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1820,"y":640,"wires":[[]]},{"id":"6ef49ceb8e619a60","type":"ha-sensor","z":"17235fd954b8a4ef","d":true,"g":"e4c88bf6451774c7","name":"Color Temperature","entityConfig":"4be5261e97cf8f72","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1840,"y":700,"wires":[[]]},{"id":"b15848cd381d1466","type":"ha-sensor","z":"17235fd954b8a4ef","d":true,"g":"653fd4888fcfeedb","name":"Brightness","entityConfig":"28c7148b80d3df07","version":0,"state":"payload.brightness","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":2190,"y":2600,"wires":[[]]},{"id":"93ed5d3ad882290c","type":"ha-sensor","z":"17235fd954b8a4ef","d":true,"g":"653fd4888fcfeedb","name":"Color Temperature","entityConfig":"4be5261e97cf8f72","version":0,"state":"payload.color_temp","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":2170,"y":2700,"wires":[[]]},{"id":"18658326fa88a17f","type":"switch","z":"17235fd954b8a4ef","g":"9438416fc73afbc1","name":"","property":"payload.entity_id","propertyType":"msg","rules":[{"t":"eq","v":"virtualLightID","vt":"flow"}],"checkall":"true","repair":false,"outputs":1,"x":250,"y":140,"wires":[["7c5fbacc154d0a4f"]]},{"id":"7998cfe76c679348","type":"link in","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"link in 5","links":["039448d1d9ec0ad3"],"x":175,"y":5360,"wires":[["c15158b3608924c5"]]},{"id":"039448d1d9ec0ad3","type":"link out","z":"17235fd954b8a4ef","name":"link out 7","mode":"link","links":["f87127beefed6dcd","7998cfe76c679348","2e2946a360890fde"],"x":545,"y":320,"wires":[]},{"id":"f87127beefed6dcd","type":"link in","z":"17235fd954b8a4ef","g":"dcfb9f8cdf58735d","name":"link in 6","links":["039448d1d9ec0ad3"],"x":135,"y":5960,"wires":[["2d1d545cfd877983"]]},{"id":"2e2946a360890fde","type":"link in","z":"17235fd954b8a4ef","g":"9f91a26760260398","name":"link in 7","links":["039448d1d9ec0ad3"],"x":695,"y":480,"wires":[["3f3e2e65abba99e5"]]},{"id":"7c5fbacc154d0a4f","type":"link out","z":"17235fd954b8a4ef","g":"9438416fc73afbc1","name":"link out 8","mode":"link","links":["ad4b627f849c97a4","c769a08f285a40f2","ed9c0bf832746a2f","6b35536846756b9e","f2dd4d9a5e720477","2f0ddfda87ca5792","335da76e1bf98584"],"x":255,"y":200,"wires":[]},{"id":"ad4b627f849c97a4","type":"link in","z":"17235fd954b8a4ef","g":"c90ca113dabe3a16","name":"link in 8","links":["7c5fbacc154d0a4f"],"x":225,"y":1380,"wires":[["bc314d6deae86b0a"]]},{"id":"c769a08f285a40f2","type":"link in","z":"17235fd954b8a4ef","g":"fede2d2cc6757096","name":"link in 9","links":["7c5fbacc154d0a4f"],"x":225,"y":1840,"wires":[["c91f5c8567840caf"]]},{"id":"ed9c0bf832746a2f","type":"link in","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"link in 10","links":["7c5fbacc154d0a4f"],"x":145,"y":4640,"wires":[["7ba086d48ad49347"]]},{"id":"6b35536846756b9e","type":"link in","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"link in 11","links":["7c5fbacc154d0a4f"],"x":75,"y":6360,"wires":[["25265aaa55f53869"]]},{"id":"f2dd4d9a5e720477","type":"link in","z":"17235fd954b8a4ef","g":"742c3cdbda580485","name":"link in 12","links":["7c5fbacc154d0a4f"],"x":225,"y":1080,"wires":[["26a8d3df1fa61795"]]},{"id":"2f0ddfda87ca5792","type":"link in","z":"17235fd954b8a4ef","g":"7af13a48ec044dbb","name":"link in 13","links":["7c5fbacc154d0a4f"],"x":175,"y":5000,"wires":[["23db8d1fbb9e8486"]]},{"id":"535d59d7498d285a","type":"ha-sensor","z":"17235fd954b8a4ef","d":true,"g":"e4c88bf6451774c7","name":"Target Brightness","entityConfig":"95b10ab32768d2fc","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":2060,"y":640,"wires":[[]]},{"id":"3a6dc02a0d3e3b61","type":"ha-sensor","z":"17235fd954b8a4ef","d":true,"g":"e4c88bf6451774c7","name":"Target Color Temperature","entityConfig":"414503329910d475","version":0,"state":"payload","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":2080,"y":700,"wires":[[]]},{"id":"8a3835c0d47d9080","type":"ha-sensor","z":"17235fd954b8a4ef","d":true,"g":"653fd4888fcfeedb","name":"Target Color Temperature","entityConfig":"414503329910d475","version":0,"state":"payload.color_temp","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1570,"y":2520,"wires":[[]]},{"id":"c3db95e336b3378b","type":"ha-sensor","z":"17235fd954b8a4ef","d":true,"g":"653fd4888fcfeedb","name":"Target Brightness","entityConfig":"95b10ab32768d2fc","version":0,"state":"payload.brightness","stateType":"msg","attributes":[],"inputOverride":"allow","outputProperties":[],"x":1550,"y":2440,"wires":[[]]},{"id":"4da16e8d9be5f23f","type":"ha-number","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"Circadian Max Brightness","version":1,"debugenabled":false,"inputs":0,"outputs":1,"entityConfig":"95bec4fa9ba26c12","mode":"listen","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":130,"y":2380,"wires":[["f2b84cc211e3c63e"]]},{"id":"889fe11ed2215693","type":"ha-number","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"Circadian Min Brightness","version":1,"debugenabled":false,"inputs":0,"outputs":1,"entityConfig":"26f878590ab085bd","mode":"listen","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":130,"y":2420,"wires":[["f2b84cc211e3c63e"]]},{"id":"65290ebd3572836b","type":"ha-number","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"Circadian Max Color Temperature","version":1,"debugenabled":false,"inputs":0,"outputs":1,"entityConfig":"ef3b15931f4e3eee","mode":"listen","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":160,"y":2460,"wires":[["f2b84cc211e3c63e"]]},{"id":"2ddce62d8991da40","type":"ha-number","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"Circadian Min Color Temperature","version":1,"debugenabled":false,"inputs":0,"outputs":1,"entityConfig":"952b82ddd83ce5b8","mode":"listen","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":150,"y":2500,"wires":[["f2b84cc211e3c63e"]]},{"id":"ea96c167f18e9a34","type":"function","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"Set Busy State","func":"flow.set(\"circadian_iterator_BUSY\", true); // Set the \"busy\" variable to true\nsetTimeout(() => {\n    flow.set(\"circadian_iterator_BUSY\", false);\n}, 4000);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2500,"y":6240,"wires":[["7898d4f4710c2e9a"]]},{"id":"a4b3a133132369fd","type":"delay","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"","pauseType":"delay","timeout":"500","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":2490,"y":6320,"wires":[["28d8fbbce125d262"]]},{"id":"cf2ee3f17dadba1a","type":"function","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"Release Busy State","func":"flow.set(\"circadian_iterator_BUSY\", false); // Set the \"busy\" variable to false\nmsg.payload = \"bussy set to OFF\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":3030,"y":6300,"wires":[["afa87d0fd6327273"]]},{"id":"7898d4f4710c2e9a","type":"function","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"Sender","func":"msg.sender = \"Circadian Iterator\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2680,"y":6240,"wires":[["7cfde633758bae64"]]},{"id":"cac3beb9cc0a2722","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Sender","func":"msg.sender = \"Master OFF->ON or ON->OFF\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1700,"y":4380,"wires":[["a5bcef381e5c9e24"]]},{"id":"590630caa2e8a456","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Sender","func":"msg.sender = \"Master OFF->ON or ON->OFF\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1340,"y":4380,"wires":[["531ecac57731df3d"]]},{"id":"b320cac4dbf8485d","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Sender","func":"msg.sender = \"Master OFF->ON or ON->OFF\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1340,"y":4700,"wires":[["099fbd4e26a948c5"]]},{"id":"808d56f095f8e52d","type":"function","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"Sender","func":"msg.sender = \"Master OFF->ON or ON->OFF\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":580,"y":4820,"wires":[["858b2c12bfdd913e"]]},{"id":"f7af962b48b5e9a8","type":"function","z":"17235fd954b8a4ef","g":"7af13a48ec044dbb","name":"Sender","func":"msg.sender = \"Update Lights when Master changes\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1460,"y":5060,"wires":[["54e188e09ec8c881"]]},{"id":"3442a91b6882e839","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Sender","func":"msg.sender = \"Lights OFF->ON or ON->OFF\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1380,"y":5440,"wires":[["bd768ff1ee775485"]]},{"id":"9e5e7c330b482df2","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Sender","func":"msg.sender = \"Lights OFF->ON or ON->OFF\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1160,"y":5440,"wires":[["fbe5034076d3c527"]]},{"id":"73aefa11b41d70cb","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Sender","func":"msg.sender = \"Lights OFF->ON or ON->OFF\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1090,"y":5720,"wires":[["68b9ccc0a12ba5b7"]]},{"id":"f1ac28ea71dc852a","type":"api-call-service","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"","server":"13f57a0.20e1386","version":7,"debugenabled":false,"action":"light.turn_on","floorId":[],"areaId":[],"deviceId":[],"entityId":["{{entityId}}"],"labelId":[],"data":"{{{JSON}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"light","service":"turn_on","x":1860,"y":5660,"wires":[["cde4218df76352a1"]]},{"id":"1a743ba9715a437b","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Sender","func":"msg.sender = \"Lights OFF->ON or ON->OFF\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1700,"y":5620,"wires":[["f1ac28ea71dc852a"]]},{"id":"73c44de5a8e3a347","type":"function","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"Sender","func":"msg.sender = \"Lights OFF->ON or ON->OFF\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2280,"y":5420,"wires":[["32e9f59a4099b50b"]]},{"id":"646411b1237fce07","type":"function","z":"17235fd954b8a4ef","g":"dcfb9f8cdf58735d","name":"Sender","func":"msg.sender = \"Update Master when Lights changes\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1440,"y":6060,"wires":[["07c0a37bc5f96ef0"]]},{"id":"19c2a17840770268","type":"link out","z":"17235fd954b8a4ef","g":"fede2d2cc6757096","name":"link out 9","mode":"link","links":["4b73dbb4c765e672"],"x":1795,"y":1740,"wires":[]},{"id":"a8dba29bcb053abb","type":"link out","z":"17235fd954b8a4ef","g":"732877e34138818a","name":"link out 10","mode":"link","links":["4b73dbb4c765e672"],"x":1765,"y":2080,"wires":[]},{"id":"94407f156d7711dc","type":"link out","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"link out 11","mode":"link","links":["4b73dbb4c765e672"],"x":3385,"y":6340,"wires":[]},{"id":"15343c9e55490efb","type":"link out","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"link out 12","mode":"link","links":["4b73dbb4c765e672"],"x":1995,"y":4380,"wires":[]},{"id":"9ae84e042bf3d9e8","type":"link out","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"link out 13","mode":"link","links":["4b73dbb4c765e672"],"x":1615,"y":4480,"wires":[]},{"id":"97efd3a6310e0fb2","type":"link out","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"link out 14","mode":"link","links":["4b73dbb4c765e672"],"x":1625,"y":4700,"wires":[]},{"id":"6677f5ea2efcd6e8","type":"link out","z":"17235fd954b8a4ef","g":"b023bab5313290a0","name":"link out 15","mode":"link","links":["4b73dbb4c765e672"],"x":945,"y":4820,"wires":[]},{"id":"216ddf4e879ea40f","type":"link out","z":"17235fd954b8a4ef","g":"7af13a48ec044dbb","name":"link out 16","mode":"link","links":["4b73dbb4c765e672"],"x":1755,"y":5060,"wires":[]},{"id":"9a25684ca272c455","type":"link out","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"link out 17","mode":"link","links":["4b73dbb4c765e672"],"x":1385,"y":5500,"wires":[]},{"id":"713aa0b3a902a1b0","type":"link out","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"link out 18","mode":"link","links":["4b73dbb4c765e672"],"x":1415,"y":5720,"wires":[]},{"id":"defc832bd6fe5f47","type":"link out","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"link out 19","mode":"link","links":["4b73dbb4c765e672"],"x":1635,"y":5500,"wires":[]},{"id":"cde4218df76352a1","type":"link out","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"link out 20","mode":"link","links":["4b73dbb4c765e672"],"x":1975,"y":5660,"wires":[]},{"id":"f0d93ee93785e4ed","type":"link out","z":"17235fd954b8a4ef","g":"dcfb9f8cdf58735d","name":"link out 21","mode":"link","links":["4b73dbb4c765e672"],"x":2095,"y":6060,"wires":[]},{"id":"e46554afaa5af226","type":"link out","z":"17235fd954b8a4ef","g":"6e2df05fdc655e13","name":"link out 22","mode":"link","links":["4b73dbb4c765e672"],"x":2575,"y":5440,"wires":[]},{"id":"8ccb1542fa2e9408","type":"function","z":"17235fd954b8a4ef","g":"fede2d2cc6757096","name":"Sender","func":"msg.sender = \"Sleep Mode\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1480,"y":1760,"wires":[["a0eb7548877048bf"]]},{"id":"0c28c1adfde16256","type":"function","z":"17235fd954b8a4ef","g":"732877e34138818a","name":"Sender","func":"msg.sender = \"Away Mode\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1440,"y":2080,"wires":[["85107b83ba7ebbb5"]]},{"id":"08341af29b119c7a","type":"api-current-state","z":"17235fd954b8a4ef","d":true,"name":"","server":"13f57a0.20e1386","version":3,"outputs":2,"halt_if":"off","halt_if_type":"str","halt_if_compare":"is","entity_id":"{{flow.virtualLightID}}","state_type":"str","blockInputOverrides":false,"outputProperties":[],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":1120,"y":640,"wires":[["581c328444062105"],[]]},{"id":"99a8ba4dac4e1e3d","type":"inject","z":"17235fd954b8a4ef","d":true,"name":"","props":[],"repeat":"10","crontab":"","once":true,"onceDelay":0.1,"topic":"","x":850,"y":640,"wires":[["08341af29b119c7a"]]},{"id":"581c328444062105","type":"function","z":"17235fd954b8a4ef","d":true,"name":"Send Values to Lights","func":"const entityMessages = flow.get(\"entityMessages\");\nconst brightness = 0;\n\n\nfor (const entityId in entityMessages) {\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n\n    let jsonData;\n    jsonData = `{\"brightness\":${brightness}}`;\n    node.send([null,{ entityId, JSON: jsonData }]);\n    node.done();\n  }\n}\n\nreturn msg;","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1240,"y":720,"wires":[[],["e2d1bcbb7fc47ba0"]]},{"id":"e2d1bcbb7fc47ba0","type":"function","z":"17235fd954b8a4ef","d":true,"name":"Sender","func":"msg.sender = \"OFF\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1420,"y":780,"wires":[["64feb56fb6fc5125"]]},{"id":"64feb56fb6fc5125","type":"api-call-service","z":"17235fd954b8a4ef","d":true,"name":"","server":"13f57a0.20e1386","version":7,"debugenabled":false,"action":"light.turn_on","floorId":[],"areaId":[],"deviceId":[],"entityId":["{{entityId}}"],"labelId":[],"data":"{{{JSON}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":false,"domain":"light","service":"turn_on","x":1570,"y":780,"wires":[[]]},{"id":"bd1435f828ea712f","type":"server-state-changed","z":"17235fd954b8a4ef","g":"9438416fc73afbc1","name":"","server":"13f57a0.20e1386","version":6,"outputs":1,"exposeAsEntityConfig":"","entities":{"entity":[],"substring":[],"regex":["^light.virtual*"]},"outputInitially":false,"stateType":"str","ifState":"","ifStateType":"str","ifStateOperator":"is","outputOnlyOnStateChange":false,"for":"0","forType":"num","forUnits":"minutes","ignorePrevStateNull":false,"ignorePrevStateUnknown":false,"ignorePrevStateUnavailable":false,"ignoreCurrentStateUnknown":false,"ignoreCurrentStateUnavailable":false,"outputProperties":[{"property":"payload.event","propertyType":"msg","value":"","valueType":"eventData"},{"property":"payload.entity_id","propertyType":"msg","value":"","valueType":"triggerId"}],"x":200,"y":80,"wires":[["18658326fa88a17f"]]},{"id":"8e3d192a358e59e4","type":"function","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"Verify if busy.","func":"let busy1 = flow.get(\"update_master_when_lights_change_BUSY\"); // Get the current value of \"busy\"\nlet busy2 = flow.get(\"lights_OFF_ON_or_ON_OFF_BUSY\");\nlet busy3 = flow.get(\"update_lights_when_master_changes_BUSY\");\nlet busy4 = flow.get(\"master_OFF_ON_or_ON_OFF_BUSY\");\nif (busy1 || busy2 || busy3 || busy4) { // Check if busy is true\n    return [null,msg];\n} else {\n    return [msg,null]; \n}","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1090,"y":6340,"wires":[["fb577f254dda4644"],["4b116537efb6fbe7"]]},{"id":"03de50ac8e192998","type":"switch","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"","property":"previousValue","propertyType":"msg","rules":[{"t":"neq","v":"Away","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":390,"y":6480,"wires":[["8d1d875e18da7317"]]},{"id":"335da76e1bf98584","type":"link in","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"link in 14","links":["7c5fbacc154d0a4f"],"x":95,"y":3200,"wires":[["f67e2c6c0e8ddfb0"]]},{"id":"fb630b0dad4c978d","type":"inject","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"","props":[{"p":"payload"}],"repeat":"","crontab":"","once":true,"onceDelay":"1","topic":"","payload":"start","payloadType":"str","x":190,"y":6280,"wires":[["a18ee8892df7f9de"]]},{"id":"a18ee8892df7f9de","type":"api-current-state","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"","server":"13f57a0.20e1386","version":3,"outputs":2,"halt_if":"on","halt_if_type":"str","halt_if_compare":"is","entity_id":"{{flow.virtualLightID}}","state_type":"str","blockInputOverrides":false,"outputProperties":[],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":460,"y":6280,"wires":[["690c9b43757699dc"],[]]},{"id":"5659d219e102b8f0","type":"delay","z":"17235fd954b8a4ef","g":"732877e34138818a","name":"","pauseType":"random","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"0","randomLast":"10","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":1240,"y":2060,"wires":[["0c28c1adfde16256"]]},{"id":"4307ce8d1f2655d2","type":"function","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"Create Entity Queue","func":"// Access the flow variable array or initialize it if it doesn't exist\nlet circadianQueue = flow.get('circadianQueue') || [];\n\n// Extract the relevant data from the incoming message \nconst targetEntityID = msg.targetEntityID;\nconst brightness = msg.brightness;\nconst color_temperature = msg.color_temperature;\n\n// Find the index of the entity in the array\nconst entityIndex = circadianQueue.findIndex(entity => entity.targetEntityID === targetEntityID);\n\n// If the entity exists, update its brightness and color_temperature\nif (entityIndex !== -1) {\n    circadianQueue[entityIndex] = { targetEntityID, brightness, color_temperature };\n} else {\n    // Otherwise, add the new entity to the array\n    circadianQueue.push({ targetEntityID, brightness, color_temperature });\n}\n\n// Store the updated array in the flow variable\nflow.set('circadianQueue', circadianQueue);\nflow.set('circadianQueueRunCount', 0);\n// Return the message (optional, depending on your flow)\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":3100,"y":6240,"wires":[["3cf525fd5f502004"]]},{"id":"3cf525fd5f502004","type":"function","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"function 41","func":"const circadianQueue = flow.get('circadianQueue') || [];\n // Prepare the message payload with the circadianQueue data\nmsg.set = circadianQueue;\n\n// Return the message\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":3330,"y":6240,"wires":[["94407f156d7711dc"]]},{"id":"f279ac64cd08075c","type":"function","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"clears the queue","func":"// Access the circadianQueue array from the flow variable\nlet circadianQueue = flow.get('circadianQueue') || [];\n\n// Extract the entity ID, brightness, and color temperature from the incoming message\nconst entityToRemove = msg.data.entity_id;\nconst brightnessToRemove = msg.data.attributes.brightness;\nconst colorTempToRemove = msg.data.attributes.color_temp_kelvin;\n\n// Filter the array to remove the entity with conditional brightness and color temperature matching\ncircadianQueue = circadianQueue.filter(entity => {\n  // If brightness in the queue is null, don't consider it for matching\n  if (entity.brightness === null) {\n    // If color temperature is also null, only match the ID\n    if (entity.color_temperature === null) {\n      return entity.targetEntityID !== entityToRemove;\n    } else {\n      // Otherwise, match ID and color temperature\n      return entity.targetEntityID !== entityToRemove && entity.color_temperature !== colorTempToRemove;\n    }\n  } else {\n    // If brightness is not null, check color temperature\n    if (entity.color_temperature === null) {\n      // If color temperature is null, match ID and brightness\n      return entity.targetEntityID !== entityToRemove && entity.brightness !== brightnessToRemove;\n    } else {\n      // Otherwise, match all three attributes\n      return entity.targetEntityID !== entityToRemove && \n             entity.brightness !== brightnessToRemove &&\n             entity.color_temperature !== colorTempToRemove;\n    }\n  }\n});\n\n// Store the updated array in the flow variable\nflow.set('circadianQueue', circadianQueue);\n\n// Return the message (optional)\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2960,"y":6520,"wires":[[]]},{"id":"afa87d0fd6327273","type":"function","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"function 43","func":"const circadianQueue = flow.get('circadianQueue') || [];\n\n// Prepare the message payload with the circadianQueue data\nmsg.remove = circadianQueue;\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":3250,"y":6340,"wires":[["94407f156d7711dc"]]},{"id":"d0a9f95749107c4a","type":"api-current-state","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"","server":"13f57a0.20e1386","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"{{payload.targetEntityID}}","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":2980,"y":6460,"wires":[["f279ac64cd08075c"]]},{"id":"58c7086d51ea0d1f","type":"function","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"Reads the queue","func":"const circadianQueue = flow.get('circadianQueue') || [];\n\n// Iterate over each entity in the array\ncircadianQueue.forEach(entity => {\n  // Create a new message for each entity\n  const newMsg = {\n    payload: {\n      targetEntityID: entity.targetEntityID,\n      brightness: entity.brightness,\n      color_temperature: entity.color_temperature\n    }\n  };\n\n  // Send the new message\n  node.send(newMsg);\n  node.done;\n});\n\n// Return nothing to prevent sending the original message\nreturn null;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":3030,"y":6400,"wires":[["d0a9f95749107c4a"]]},{"id":"28d8fbbce125d262","type":"function","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"Check if queue is empty or no","func":"// Initialize a counter variable in the flow context (if it doesn't exist)\nlet circadianQueueRunCount = flow.get('circadianQueueRunCount') || 0;\n\n// Set the maximum number of times the code should run\nconst circadianQueueMaxRuns = 6; // You can change this value as needed\n\n// Check if the run count is less than the maximum\nif (circadianQueueRunCount < circadianQueueMaxRuns) {\n  // Access the circadianQueue array from the flow variable\n  const circadianQueue = flow.get('circadianQueue') || [];\n\n  // Check if the queue is not empty\n  if (circadianQueue.length > 0) {\n    // Send a message on output 2\n    const newMsg = {\n      payload: \"Circadian queue is not empty\" // You can customize the payload\n    };\n    node.send([null, newMsg]);\n    node.done; \n  } else {\n    // Send a message on output 1 (optional)\n    const newMsg = {\n      payload: \"Circadian queue is empty\" // You can customize the payload\n    };\n    node.send([newMsg, null]);\n    node.done; \n  }\n\n  // Increment the run count\n  circadianQueueRunCount++;\n  flow.set('circadianQueueRunCount', circadianQueueRunCount);\n} else {\n  // Optional: Send a message indicating the limit has been reached\n  const limitMsg = { payload: \"Code execution limit reached\" };\n  node.send([limitMsg, null]);\n  node.done;\n  flow.set(\"circadianQueue\",null) \n}\n\n// Return null to prevent sending the original message on output 1\nreturn null;","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2730,"y":6320,"wires":[["cf2ee3f17dadba1a"],["58c7086d51ea0d1f","a4b3a133132369fd","afa87d0fd6327273"]]},{"id":"4b116537efb6fbe7","type":"delay","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","name":"","pauseType":"random","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"0","randomLast":"2000","randomUnits":"milliseconds","drop":false,"allowrate":false,"outputs":1,"x":740,"y":6340,"wires":[["af731d8c3ab4784e"]]},{"id":"97cbe4ed666b1f33","type":"inject","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"","props":[{"p":"payload"}],"repeat":"20","crontab":"","once":true,"onceDelay":"1","topic":"","payload":"start","payloadType":"str","x":230,"y":6740,"wires":[["b2a68478794f5f33"]]},{"id":"8e30de3ab21f4d8f","type":"api-current-state","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"","server":"13f57a0.20e1386","version":3,"outputs":2,"halt_if":"on","halt_if_type":"str","halt_if_compare":"is","entity_id":"{{flow.virtualLightID}}","state_type":"str","blockInputOverrides":false,"outputProperties":[],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":300,"y":6940,"wires":[["dedf21475c587039"],[]]},{"id":"dedf21475c587039","type":"ha-select","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"7a3872aa6f2b2dea","mode":"get","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":430,"y":6740,"wires":[["66f9791ac0144bca"]]},{"id":"66f9791ac0144bca","type":"switch","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"Circadian","vt":"str"},{"t":"eq","v":"Away","vt":"str"},{"t":"eq","v":"Sleep","vt":"str"},{"t":"eq","v":"Manual","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":590,"y":6740,"wires":[["b05ede22815e183c"],["b05ede22815e183c"],[],[]]},{"id":"b2a68478794f5f33","type":"delay","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"","pauseType":"random","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"0","randomLast":"10","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":240,"y":6820,"wires":[["be6f824ac51adc7f"]]},{"id":"be6f824ac51adc7f","type":"function","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"Verify if busy.","func":"let busy1 = flow.get(\"update_master_when_lights_change_BUSY\"); // Get the current value of \"busy\"\nlet busy2 = flow.get(\"lights_OFF_ON_or_ON_OFF_BUSY\");\nlet busy3 = flow.get(\"update_lights_when_master_changes_BUSY\");\nlet busy4 = flow.get(\"master_OFF_ON_or_ON_OFF_BUSY\");\nlet busy5 = flow.get(\"circadian_iterator_BUSY\");\nif (busy1 || busy2 || busy3 || busy4 || busy5 ) { // Check if busy is true\n    return [null,msg];\n} else {\n    return [msg,null]; \n}","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":250,"y":6880,"wires":[["8e30de3ab21f4d8f"],[]]},{"id":"c29ed1f47c19d04d","type":"function","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"Get Circadian Values","func":"\n\nconst msgnew = { \n    brightness: flow.get(\"currentBrightness\"),\n    color_temp: flow.get(\"currentColorTemperature\")\n};\nreturn msgnew;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":820,"y":6780,"wires":[["fd1a94bc8c042f3d"]]},{"id":"fd1a94bc8c042f3d","type":"ha-switch","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"Dynamic Brightness","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"afdc4e7a27220b81","enableInput":true,"outputOnStateChange":false,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":790,"y":6840,"wires":[["3fcb833f1a7551e5"],["e6a6f77b07896bd1"]]},{"id":"3fcb833f1a7551e5","type":"function","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"get dynamic brightness","func":"\nmsg.dynamicBrightness = true;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1110,"y":6800,"wires":[["6de463af3c854eb4"]]},{"id":"e6a6f77b07896bd1","type":"function","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"get dynamic brightness","func":"msg.dynamicBrightness = false;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1090,"y":6860,"wires":[["6de463af3c854eb4"]]},{"id":"23a4d5727252c8ab","type":"function","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"get dynamic color temp","func":"\nmsg.dynamicColor_temp = true;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1670,"y":6800,"wires":[["5e79cf8b2f06fe22"]]},{"id":"db2b23f71cb305f4","type":"function","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"get dynamic color temp","func":"msg.dynamicColor_temp = false;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1670,"y":6860,"wires":[["5e79cf8b2f06fe22"]]},{"id":"5e79cf8b2f06fe22","type":"function","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"Prepare Message Brightness+CT","func":"const brightness = msg.brightness;\nconst color_temperature = msg.color_temp;\nconst targetEntityID = flow.get(\"virtualLightID\");\nconst dynamicBrightness = msg.dynamicBrightness;\nconst dynamicColor_temp = msg.dynamicColor_temp;\nlet jsonData;\nif(dynamicBrightness){\n  if(dynamicColor_temp){\n    jsonData = `{\"brightness\":${brightness},\"kelvin\":${color_temperature}}`;\n  }else{\n    jsonData = `{\"brightness\":${brightness}}`;\n  }\n}else if(dynamicColor_temp){\n    jsonData = `{\"kelvin\":${color_temperature}}`;\n}\n\nnode.send([null,{targetEntityID, brightness: brightness, color_temperature: color_temperature, JSON: jsonData }],false);\nnode.done();\n\nconst entityMessages = flow.get(\"entityMessages\") || {};\n\nfor (const entityId in entityMessages) {\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.brightness !== null &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n\n      node.send([null,{targetEntityID: entityId, brightness: brightness, color_temperature: color_temperature, JSON: jsonData }],false);\n      node.done();\n   }\n  }\n}\n\nconst newMsg = {\n      payload: \"iterate\" // You can customize the payload\n    };\nreturn newMsg;\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2020,"y":6800,"wires":[["25ec553cc5e9e4b4"],["d92593b2c5e35a58"]]},{"id":"b05ede22815e183c","type":"function","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"Set Busy State","func":"flow.set(\"circadian_iterator_BUSY\", true); // Set the \"busy\" variable to true\nsetTimeout(() => {\n    flow.set(\"circadian_iterator_BUSY\", false);\n}, 10000);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":800,"y":6720,"wires":[["c29ed1f47c19d04d"]]},{"id":"d92593b2c5e35a58","type":"function","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"Sender","func":"msg.sender = \"Circadian Iterator v2\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2320,"y":6840,"wires":[["4efcdf85317e5850"]]},{"id":"4efcdf85317e5850","type":"api-call-service","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"","server":"13f57a0.20e1386","version":7,"debugenabled":false,"action":"light.turn_on","floorId":[],"areaId":[],"deviceId":[],"entityId":["{{targetEntityID}}"],"labelId":[],"data":"{{{JSON}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":true,"domain":"light","service":"turn_on","x":2490,"y":6840,"wires":[["7b483059f19a990f"]]},{"id":"7347fe3a3231db47","type":"link out","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"link out 24","mode":"link","links":["4b73dbb4c765e672"],"x":2975,"y":6820,"wires":[]},{"id":"6de463af3c854eb4","type":"ha-switch","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"Dynamic Color Temperature","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"e6217b29e753b525","enableInput":true,"outputOnStateChange":false,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":1380,"y":6840,"wires":[["23a4d5727252c8ab"],["db2b23f71cb305f4"]]},{"id":"7b483059f19a990f","type":"function","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"Create Entity Queue","func":"// Access the flow variable array or initialize it if it doesn't exist\nlet circadianQueue = flow.get('circadianQueue') || [];\n\n// Extract the relevant data from the incoming message \nconst targetEntityID = msg.targetEntityID;\nconst brightness = msg.brightness;\nconst color_temperature = msg.color_temperature;\n\n// Find the index of the entity in the array\nconst entityIndex = circadianQueue.findIndex(entity => entity.targetEntityID === targetEntityID);\n\n// If the entity exists, update its brightness and color_temperature\nif (entityIndex !== -1) {\n    circadianQueue[entityIndex] = { targetEntityID, brightness, color_temperature };\n} else {\n    // Otherwise, add the new entity to the array\n    circadianQueue.push({ targetEntityID, brightness, color_temperature });\n}\n\n// Store the updated array in the flow variable\nflow.set('circadianQueue', circadianQueue);\nflow.set('circadianQueueRunCount', 0);\n// Return the message (optional, depending on your flow)\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2400,"y":6780,"wires":[["f66a8bf1928a2558"]]},{"id":"f66a8bf1928a2558","type":"function","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"function 46","func":"const circadianQueue = flow.get('circadianQueue') || [];\n // Prepare the message payload with the circadianQueue data\nmsg.set = circadianQueue;\n\n// Return the message\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2630,"y":6780,"wires":[["7347fe3a3231db47"]]},{"id":"25ec553cc5e9e4b4","type":"delay","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"","pauseType":"delay","timeout":"500","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":2210,"y":6900,"wires":[["0f34dadebf74da79"]]},{"id":"0f34dadebf74da79","type":"function","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"Check if queue is empty or no","func":"// Initialize a counter variable in the flow context (if it doesn't exist)\nlet circadianQueueRunCount = flow.get('circadianQueueRunCount') || 0;\n\n// Set the maximum number of times the code should run\nconst circadianQueueMaxRuns = 9; // You can change this value as needed\n\n// Check if the run count is less than the maximum\nif (circadianQueueRunCount < circadianQueueMaxRuns) {\n  // Access the circadianQueue array from the flow variable\n  const circadianQueue = flow.get('circadianQueue') || [];\n\n  // Check if the queue is not empty\n  if (circadianQueue.length > 0) {\n    // Send a message on output 2\n    const newMsg = {\n      payload: \"Circadian queue is not empty\" // You can customize the payload\n    };\n    node.send([null, newMsg]);\n    node.done; \n  } else {\n    // Send a message on output 1 (optional)\n    const newMsg = {\n      payload: \"Circadian queue is empty\" // You can customize the payload\n    };\n    node.send([newMsg, null]);\n    node.done; \n  }\n\n  // Increment the run count\n  circadianQueueRunCount++;\n  flow.set('circadianQueueRunCount', circadianQueueRunCount);\n} else {\n  // Optional: Send a message indicating the limit has been reached\n  const limitMsg = { payload: \"Code execution limit reached\" };\n  node.send([limitMsg, null]);\n  node.done;\n  flow.set(\"circadianQueue\",null) \n}\n\n// Return null to prevent sending the original message on output 1\nreturn null;","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2470,"y":6900,"wires":[["24b141372faac09e"],["253bb55e74c901b0","25ec553cc5e9e4b4","90f30acd89217858"]]},{"id":"24b141372faac09e","type":"function","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"Release Busy State","func":"flow.set(\"circadian_iterator_BUSY\", false); // Set the \"busy\" variable to false\nmsg.payload = \"bussy set to OFF\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2750,"y":6880,"wires":[["90f30acd89217858"]]},{"id":"253bb55e74c901b0","type":"function","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"Reads the queue","func":"const circadianQueue = flow.get('circadianQueue') || [];\n\n// Iterate over each entity in the array\ncircadianQueue.forEach(entity => {\n  // Create a new message for each entity\n  const newMsg = {\n    payload: {\n      targetEntityID: entity.targetEntityID,\n      brightness: entity.brightness,\n      color_temperature: entity.color_temperature\n    }\n  };\n\n  // Send the new message\n  node.send(newMsg);\n  node.done;\n});\n\n// Return nothing to prevent sending the original message\nreturn null;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2750,"y":6980,"wires":[["c05ceb49209fcc00"]]},{"id":"90f30acd89217858","type":"function","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"function 47","func":"const circadianQueue = flow.get('circadianQueue') || [];\n\n// Prepare the message payload with the circadianQueue data\nmsg.remove = circadianQueue;\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2970,"y":6920,"wires":[["7347fe3a3231db47"]]},{"id":"c05ceb49209fcc00","type":"api-current-state","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"","server":"13f57a0.20e1386","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"{{payload.targetEntityID}}","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":2700,"y":7040,"wires":[["1c86d16780eace5d"]]},{"id":"1c86d16780eace5d","type":"function","z":"17235fd954b8a4ef","g":"b551f315ef6cd88d","name":"clears the queue","func":"// Access the circadianQueue array from the flow variable\nlet circadianQueue = flow.get('circadianQueue') || [];\n\n// Extract the entity ID, brightness, and color temperature from the incoming message\nconst entityToRemove = msg.data.entity_id;\nconst brightnessToRemove = msg.data.attributes.brightness;\nconst colorTempToRemove = msg.data.attributes.color_temp_kelvin;\n\n// Filter the array to remove the entity with conditional brightness and color temperature matching\ncircadianQueue = circadianQueue.filter(entity => {\n  // If brightness in the queue is null, don't consider it for matching\n  if (entity.brightness === null) {\n    // If color temperature is also null, only match the ID\n    if (entity.color_temperature === null) {\n      return entity.targetEntityID !== entityToRemove;\n    } else {\n      // Otherwise, match ID and color temperature\n      return entity.targetEntityID !== entityToRemove && entity.color_temperature !== colorTempToRemove;\n    }\n  } else {\n    // If brightness is not null, check color temperature\n    if (entity.color_temperature === null) {\n      // If color temperature is null, match ID and brightness\n      return entity.targetEntityID !== entityToRemove && entity.brightness !== brightnessToRemove;\n    } else {\n      // Otherwise, match all three attributes\n      return entity.targetEntityID !== entityToRemove && \n             entity.brightness !== brightnessToRemove &&\n             entity.color_temperature !== colorTempToRemove;\n    }\n  }\n});\n\n// Store the updated array in the flow variable\nflow.set('circadianQueue', circadianQueue);\n\n// Return the message (optional)\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2680,"y":7100,"wires":[[]]},{"id":"1b17ec13b98b0151","type":"catch","z":"17235fd954b8a4ef","name":"","scope":null,"uncaught":false,"x":2320,"y":320,"wires":[[]]},{"id":"c3448f5c8628ab4d","type":"function","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"Custom Evening End Time","func":"function getTsAtTime(timeString) {\n  const [hours, minutes] = timeString.split(':').map(Number);\n  const now = new Date();\n  const targetTime = new Date(\n    now.getFullYear(),\n    now.getMonth(),\n    now.getDate(),\n    hours,\n    minutes,\n    0 // Seconds (optional, defaulting to 0)\n  );\n\n  return targetTime.getTime();\n}\n\n\nconst customEndTimeString = \"21:00\"; // Example: \"22:30\"\n\n// Calculate the Unix timestamp for the custom end time\nconst customEveningEndTs = getTsAtTime(customEndTimeString);\n\nconst now = new Date(); // Define the 'now' variable\n\n// Add the customEveningEnd to msg.payload.times\nmsg.payload.times.customEveningEnd = {\n  value: `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}T${customEndTimeString}:00.000Z`,\n  ts: customEveningEndTs,\n  name: \"customEveningEnd\",\n  // Add other properties as needed (e.g., julian, valid, pos, elevation)\n};\n\n// Remove the msg.customEndTime property\ndelete msg.customEndTime;\n\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":540,"y":2400,"wires":[["b5f002066e3d1755"]]},{"id":"b5f002066e3d1755","type":"function","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"Times of Day","func":"let newmsg = JSON.parse(JSON.stringify(msg));\nnewmsg.payload.times_of_day = {};\n\nfunction processTimeOfDay(nme, obj, name_start, name_end) {\n    let ret = {};\n    ret.name  = nme;\n    ret.start = obj.times[name_start].ts;\n    ret.end   = obj.times[name_end].ts;\n    ret.perc  = (obj.ts - ret.start) / (ret.end - ret.start);\n    \n    \n    // to cover range starting before midnight and ending after it.\n    if (ret.start > ret.end)\n    {\n        let a;\n\n        // before midnight\n        if (ret.start < obj.ts) \n        {\n            a = new Date(ret.end);\n            a.setUTCDate(a.getUTCDate() + 1);\n            ret.end = a.getTime();\n             \n             \n        }\n        else if (ret.end > obj.ts) \n        {\n            a = new Date(ret.start);\n            a.setUTCDate(a.getUTCDate() - 1);\n            ret.start = a.getTime();\n\n        }\n\n    }\n    \n    ret.perc  = (obj.ts - ret.start) / (ret.end - ret.start);\n    \n    obj.times_of_day[nme] = ret;\n    if (ret.start <= obj.ts && obj.ts < ret.end ) obj.times_of_day.active = ret;\n}\n\n\nprocessTimeOfDay('night', newmsg.payload, \"customEveningEnd\", \"astronomicalDawn\");\nprocessTimeOfDay('morning', newmsg.payload, \"astronomicalDawn\", \"goldenHourDawnEnd\");\nprocessTimeOfDay('day', newmsg.payload, \"goldenHourDawnEnd\", \"sunsetStart\");\nprocessTimeOfDay('evening', newmsg.payload, \"sunsetStart\", \"customEveningEnd\");\n\n\nreturn newmsg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":490,"y":2460,"wires":[["02e9197abdcebf7c"]]},{"id":"4ae645a2990e64a3","type":"inject","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"","props":[{"p":"payload"}],"repeat":"20","crontab":"","once":true,"onceDelay":"1","topic":"","payload":"start","payloadType":"str","x":250,"y":7260,"wires":[["3b632ad85517798c"]]},{"id":"3b632ad85517798c","type":"delay","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"","pauseType":"random","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"0","randomLast":"10","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":260,"y":7340,"wires":[["ddfd95d71484f9e8"]]},{"id":"ddfd95d71484f9e8","type":"function","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"Verify if busy.","func":"let busy1 = flow.get(\"update_master_when_lights_change_BUSY\"); // Get the current value of \"busy\"\nlet busy2 = flow.get(\"lights_OFF_ON_or_ON_OFF_BUSY\");\nlet busy3 = flow.get(\"update_lights_when_master_changes_BUSY\");\nlet busy4 = flow.get(\"master_OFF_ON_or_ON_OFF_BUSY\");\nlet busy5 = flow.get(\"circadian_iterator_BUSY\");\nif (busy1 || busy2 || busy3 || busy4 || busy5 ) { // Check if busy is true\n    return [null,msg];\n} else {\n    return [msg,null]; \n}","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":270,"y":7400,"wires":[["ad83e48c2bbfded8"],[]]},{"id":"ad83e48c2bbfded8","type":"api-current-state","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"","server":"13f57a0.20e1386","version":3,"outputs":2,"halt_if":"on","halt_if_type":"str","halt_if_compare":"is","entity_id":"{{flow.virtualLightID}}","state_type":"str","blockInputOverrides":false,"outputProperties":[],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":320,"y":7460,"wires":[["84d6cdeb14b8d7de"],[]]},{"id":"84d6cdeb14b8d7de","type":"ha-select","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"","version":1,"debugenabled":false,"inputs":1,"outputs":1,"entityConfig":"7a3872aa6f2b2dea","mode":"get","value":"payload","valueType":"msg","outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"value"},{"property":"previousValue","propertyType":"msg","value":"","valueType":"previousValue"}],"x":450,"y":7260,"wires":[["fc1e211685d2beb5"]]},{"id":"fc1e211685d2beb5","type":"switch","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"Circadian","vt":"str"},{"t":"eq","v":"Away","vt":"str"},{"t":"eq","v":"Sleep","vt":"str"},{"t":"eq","v":"Manual","vt":"str"}],"checkall":"true","repair":false,"outputs":4,"x":610,"y":7260,"wires":[["a30683e18a293600"],["a30683e18a293600"],[],[]]},{"id":"a30683e18a293600","type":"function","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"Set Busy State","func":"flow.set(\"circadian_iterator_BUSY\", true); // Set the \"busy\" variable to true\nsetTimeout(() => {\n    flow.set(\"circadian_iterator_BUSY\", false);\n}, 10000);\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":820,"y":7240,"wires":[["8eeb9f85ed7c4c27"]]},{"id":"8eeb9f85ed7c4c27","type":"function","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"Get Circadian Values","func":"\n\nconst msgnew = { \n    brightness: flow.get(\"currentBrightness\"),\n    color_temp: flow.get(\"currentColorTemperature\")\n};\nreturn msgnew;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":840,"y":7300,"wires":[["f580c7e420e2da92"]]},{"id":"f580c7e420e2da92","type":"ha-switch","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"Dynamic Brightness","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"afdc4e7a27220b81","enableInput":true,"outputOnStateChange":false,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":810,"y":7360,"wires":[["86281b6b94d26b89"],["7d93a8d768a4b1e0"]]},{"id":"86281b6b94d26b89","type":"function","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"get dynamic brightness","func":"\nmsg.dynamicBrightness = true;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1130,"y":7320,"wires":[["b531a3eff1ec4cc5"]]},{"id":"7d93a8d768a4b1e0","type":"function","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"get dynamic brightness","func":"msg.dynamicBrightness = false;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1110,"y":7380,"wires":[["b531a3eff1ec4cc5"]]},{"id":"b531a3eff1ec4cc5","type":"ha-switch","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"Dynamic Color Temperature","version":0,"debugenabled":false,"inputs":1,"outputs":2,"entityConfig":"e6217b29e753b525","enableInput":true,"outputOnStateChange":false,"outputProperties":[{"property":"outputType","propertyType":"msg","value":"state change","valueType":"str"},{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"}],"x":1400,"y":7360,"wires":[["0372a39377d292f7"],["0ce251e063bbc2cd"]]},{"id":"0372a39377d292f7","type":"function","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"get dynamic color temp","func":"\nmsg.dynamicColor_temp = true;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1690,"y":7320,"wires":[["5753f673652f587b"]]},{"id":"0ce251e063bbc2cd","type":"function","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"get dynamic color temp","func":"msg.dynamicColor_temp = false;\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1690,"y":7380,"wires":[["5753f673652f587b"]]},{"id":"5753f673652f587b","type":"function","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"Prepare Message Brightness+CT","func":"const brightness = msg.brightness;\nconst color_temperature = msg.color_temp;\nconst targetEntityID = flow.get(\"virtualLightID\");\nconst dynamicBrightness = msg.dynamicBrightness;\nconst dynamicColor_temp = msg.dynamicColor_temp;\nlet jsonData;\nif(dynamicBrightness){\n  if(dynamicColor_temp){\n    jsonData = `{\"brightness\":${brightness},\"kelvin\":${color_temperature}}`;\n  }else{\n    jsonData = `{\"brightness\":${brightness}}`;\n  }\n}else if(dynamicColor_temp){\n    jsonData = `{\"kelvin\":${color_temperature}}`;\n  }else{\n    return null;\n}\n\n\nconst entityMessages = flow.get(\"entityMessages\") || {};\n\nlet msgArray = [];\nlet msgArrayIndex = 0;\nmsgArray[msgArrayIndex] = {targetEntityID, brightness: brightness, color_temperature: color_temperature, JSON: jsonData };\n\nfor (const entityId in entityMessages) {\n  const messages = entityMessages[entityId];\n  for (const message of messages) {\n    if (message.new_state &&\n        message.new_state.attributes &&\n        message.new_state.attributes.brightness !== null &&\n        message.new_state.state !== \"unavailable\" &&\n        message.new_state.state == \"on\") {\n        msgArrayIndex ++;\n        msgArray[msgArrayIndex] = {targetEntityID: entityId, brightness: brightness, color_temperature: color_temperature, JSON: jsonData };\n        \n   }\n  }\n}\n\n\n\nconst newMsg = {\n      payload: \"iterate\" // You can customize the payload\n    };\nreturn [msgArray,newMsg];\n","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2040,"y":7320,"wires":[["f09823b43e6033b3"],["3bb6eb64a736907a"]]},{"id":"04c53b91266d9a8b","type":"function","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"Sender","func":"msg.sender = \"Circadian Iterator v3\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2420,"y":7360,"wires":[["64dad059753cbb6d"]]},{"id":"64dad059753cbb6d","type":"api-call-service","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"","server":"13f57a0.20e1386","version":7,"debugenabled":false,"action":"light.turn_on","floorId":[],"areaId":[],"deviceId":[],"entityId":["{{targetEntityID}}"],"labelId":[],"data":"{{{JSON}}}","dataType":"json","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","blockInputOverrides":true,"domain":"light","service":"turn_on","x":2590,"y":7360,"wires":[["ca2d3536f67421c2"]]},{"id":"8312e61b37c6d0da","type":"link out","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"link out 25","mode":"link","links":["4b73dbb4c765e672"],"x":2955,"y":7300,"wires":[]},{"id":"ca2d3536f67421c2","type":"function","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"Create Entity Queue","func":"// Access the flow variable array or initialize it if it doesn't exist\nlet circadianQueue = flow.get('circadianQueue') || [];\n\n// Extract the relevant data from the incoming message \nconst targetEntityID = msg.targetEntityID;\nconst brightness = msg.brightness;\nconst color_temperature = msg.color_temperature;\n\n// Find the index of the entity in the array\nconst entityIndex = circadianQueue.findIndex(entity => entity.targetEntityID === targetEntityID);\n\n// If the entity exists, update its brightness and color_temperature\nif (entityIndex !== -1) {\n    circadianQueue[entityIndex] = { targetEntityID, brightness, color_temperature };\n} else {\n    // Otherwise, add the new entity to the array\n    circadianQueue.push({ targetEntityID, brightness, color_temperature });\n}\n\n// Store the updated array in the flow variable\nflow.set('circadianQueue', circadianQueue);\nflow.set('circadianQueueRunCount', 0);\n// Return the message (optional, depending on your flow)\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2560,"y":7280,"wires":[["970e941c5cc734d5"]]},{"id":"970e941c5cc734d5","type":"function","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"function 50","func":"const circadianQueue = flow.get('circadianQueue') || [];\n // Prepare the message payload with the circadianQueue data\nmsg.set = circadianQueue;\n\n// Return the message\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2770,"y":7280,"wires":[["8312e61b37c6d0da"]]},{"id":"3bb6eb64a736907a","type":"delay","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"","pauseType":"delay","timeout":"500","timeoutUnits":"milliseconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":2230,"y":7420,"wires":[["b25dab15760e30d9"]]},{"id":"b25dab15760e30d9","type":"function","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"Check if queue is empty or no","func":"// Initialize a counter variable in the flow context (if it doesn't exist)\nlet circadianQueueRunCount = flow.get('circadianQueueRunCount') || 0;\n\n// Set the maximum number of times the code should run\nconst circadianQueueMaxRuns = 9; // You can change this value as needed\nlet msgOutput1 = null;\nlet msgOutput2 = null;\n\n// Check if the run count is less than the maximum\nif (circadianQueueRunCount < circadianQueueMaxRuns) {\n  // Access the circadianQueue array from the flow variable\n  const circadianQueue = flow.get('circadianQueue') || [];\n\n  // Check if the queue is not empty\n  if (circadianQueue.length > 0) {\n    // Send a message on output 2\n    msgOutput2 = {\n      payload: \"Circadian queue is not empty\" // You can customize the payload\n    };\n  } else {\n    // Send a message on output 1 (optional)\n    msgOutput1 = {\n      payload: \"Circadian queue is empty\" // You can customize the payload\n    };\n  }\n\n  // Increment the run count\n  circadianQueueRunCount++;\n  flow.set('circadianQueueRunCount', circadianQueueRunCount);\n} else {\n  // Optional: Send a message indicating the limit has been reached\n  msgOutput1 = { payload: \"Code execution limit reached\" };\n  flow.set(\"circadianQueue\",null) \n}\n\n// Return null to prevent sending the original message on output 1\nreturn [msgOutput1,msgOutput2];","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2490,"y":7420,"wires":[["bd8d83f3befe5c99"],["c6c6432f611c590d","3bb6eb64a736907a","352bb254bc2605b9"]]},{"id":"bd8d83f3befe5c99","type":"function","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"Release Busy State","func":"flow.set(\"circadian_iterator_BUSY\", false); // Set the \"busy\" variable to false\nmsg.payload = \"bussy set to OFF\"\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2770,"y":7400,"wires":[["352bb254bc2605b9"]]},{"id":"c6c6432f611c590d","type":"function","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"Reads the queue","func":"const circadianQueue = flow.get('circadianQueue') || [];\n\n// Iterate over each entity in the array\ncircadianQueue.forEach(entity => {\n  // Create a new message for each entity\n  const newMsg = {\n    payload: {\n      targetEntityID: entity.targetEntityID,\n      brightness: entity.brightness,\n      color_temperature: entity.color_temperature\n    }\n  };\n\n  // Send the new message\n  node.send(newMsg);\n  node.done;\n});\n\n// Return nothing to prevent sending the original message\nreturn null;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2770,"y":7500,"wires":[["ba20e4edc4e7678c"]]},{"id":"352bb254bc2605b9","type":"function","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"function 51","func":"const circadianQueue = flow.get('circadianQueue') || [];\n\n// Prepare the message payload with the circadianQueue data\nmsg.remove = circadianQueue;\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2990,"y":7440,"wires":[["8312e61b37c6d0da"]]},{"id":"ba20e4edc4e7678c","type":"api-current-state","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"","server":"13f57a0.20e1386","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"{{payload.targetEntityID}}","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":2720,"y":7560,"wires":[["4f78a7155deb5e40"]]},{"id":"4f78a7155deb5e40","type":"function","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"clears the queue","func":"// Access the circadianQueue array from the flow variable\nlet circadianQueue = flow.get('circadianQueue') || [];\n\n// Extract the entity ID, brightness, and color temperature from the incoming message\nconst entityToRemove = msg.data.entity_id;\nconst brightnessToRemove = msg.data.attributes.brightness;\nconst colorTempToRemove = msg.data.attributes.color_temp_kelvin;\n\n// Filter the array to remove the entity with conditional brightness and color temperature matching\ncircadianQueue = circadianQueue.filter(entity => {\n  // If brightness in the queue is null, don't consider it for matching\n  if (entity.brightness === null) {\n    // If color temperature is also null, only match the ID\n    if (entity.color_temperature === null) {\n      return entity.targetEntityID !== entityToRemove;\n    } else {\n      // Otherwise, match ID and color temperature\n      return entity.targetEntityID !== entityToRemove && entity.color_temperature !== colorTempToRemove;\n    }\n  } else {\n    // If brightness is not null, check color temperature\n    if (entity.color_temperature === null) {\n      // If color temperature is null, match ID and brightness\n      return entity.targetEntityID !== entityToRemove && entity.brightness !== brightnessToRemove;\n    } else {\n      // Otherwise, match all three attributes\n      return entity.targetEntityID !== entityToRemove && \n             entity.brightness !== brightnessToRemove &&\n             entity.color_temperature !== colorTempToRemove;\n    }\n  }\n});\n\n// Store the updated array in the flow variable\nflow.set('circadianQueue', circadianQueue);\n\n// Return the message (optional)\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2700,"y":7620,"wires":[[]]},{"id":"f09823b43e6033b3","type":"delay","z":"17235fd954b8a4ef","d":true,"g":"7cec7f7c5943f0df","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"0.1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":2290,"y":7260,"wires":[["04c53b91266d9a8b"]]},{"id":"e90a3c9cf2063030","type":"rbe","z":"17235fd954b8a4ef","g":"732877e34138818a","name":"","func":"rbe","gap":"","start":"","inout":"out","septopics":true,"property":"payload","topi":"topic","x":610,"y":2080,"wires":[["a6da46eb05f03928"]]},{"id":"7a3872aa6f2b2dea","type":"ha-entity-config","z":"17235fd954b8a4ef","server":"13f57a0.20e1386","deviceConfig":"d49dd52497676345","name":"Mode Select","version":"6","entityType":"select","haConfig":[{"property":"name","value":"Mode Select"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"options","value":["Circadian","Manual","Sleep","Away"]}],"resend":false,"debugEnabled":false},{"id":"d49dd52497676345","type":"ha-device-config","z":"17235fd954b8a4ef","name":"SVT Light Controller","hwVersion":"","manufacturer":"Node-RED","model":"","swVersion":""},{"id":"afdc4e7a27220b81","type":"ha-entity-config","z":"17235fd954b8a4ef","server":"13f57a0.20e1386","deviceConfig":"d49dd52497676345","name":"Dynamic Brightness","version":"6","entityType":"switch","haConfig":[{"property":"name","value":"Dynamic Brightness"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":"switch"}],"resend":false,"debugEnabled":false},{"id":"e6217b29e753b525","type":"ha-entity-config","z":"17235fd954b8a4ef","server":"13f57a0.20e1386","deviceConfig":"d49dd52497676345","name":"Dynamic Color Temperature","version":"6","entityType":"switch","haConfig":[{"property":"name","value":"Dynamic Color Temperature"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":"switch"}],"resend":false,"debugEnabled":false},{"id":"95bec4fa9ba26c12","type":"ha-entity-config","z":"17235fd954b8a4ef","server":"13f57a0.20e1386","deviceConfig":"d49dd52497676345","name":"Circadian Max Brightness","version":"6","entityType":"number","haConfig":[{"property":"name","value":"Circadian Max Brightness"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"config"},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":"%"},{"property":"min_value","value":1},{"property":"max_value","value":100},{"property":"step_value","value":1},{"property":"mode","value":"slider"}],"resend":false,"debugEnabled":false},{"id":"26f878590ab085bd","type":"ha-entity-config","z":"17235fd954b8a4ef","server":"13f57a0.20e1386","deviceConfig":"d49dd52497676345","name":"Circadian Min Brightness","version":"6","entityType":"number","haConfig":[{"property":"name","value":"Circadian Min Brightness"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"config"},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":"%"},{"property":"min_value","value":1},{"property":"max_value","value":100},{"property":"step_value","value":1},{"property":"mode","value":"slider"}],"resend":false,"debugEnabled":false},{"id":"ef3b15931f4e3eee","type":"ha-entity-config","z":"17235fd954b8a4ef","server":"13f57a0.20e1386","deviceConfig":"d49dd52497676345","name":"Circadian Max Color Temperature","version":"6","entityType":"number","haConfig":[{"property":"name","value":"Circadian Max Color Temperature"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"config"},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":"k"},{"property":"min_value","value":2000},{"property":"max_value","value":6535},{"property":"step_value","value":""},{"property":"mode","value":"slider"}],"resend":false,"debugEnabled":false},{"id":"952b82ddd83ce5b8","type":"ha-entity-config","z":"17235fd954b8a4ef","server":"13f57a0.20e1386","deviceConfig":"d49dd52497676345","name":"Circadian Min Color Temperature","version":"6","entityType":"number","haConfig":[{"property":"name","value":"Circadian Min Color Temperature"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"config"},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":"k"},{"property":"min_value","value":2000},{"property":"max_value","value":6535},{"property":"step_value","value":""},{"property":"mode","value":"slider"}],"resend":false,"debugEnabled":false},{"id":"cd030f73a48c73bf","type":"ha-entity-config","z":"17235fd954b8a4ef","server":"13f57a0.20e1386","deviceConfig":"d49dd52497676345","name":"Default Mode","version":"6","entityType":"select","haConfig":[{"property":"name","value":"Default Mode"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":"config"},{"property":"options","value":["Circadian","Manual"]}],"resend":false,"debugEnabled":false},{"id":"28c7148b80d3df07","type":"ha-entity-config","z":"17235fd954b8a4ef","server":"13f57a0.20e1386","deviceConfig":"d49dd52497676345","name":"Brightness","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"Brightness"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":""},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"4be5261e97cf8f72","type":"ha-entity-config","z":"17235fd954b8a4ef","server":"13f57a0.20e1386","deviceConfig":"d49dd52497676345","name":"Color Temperature","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"Color Temperature"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":""},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"95b10ab32768d2fc","type":"ha-entity-config","z":"17235fd954b8a4ef","server":"13f57a0.20e1386","deviceConfig":"d49dd52497676345","name":"Target Brightness","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"Target Brightness"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":""},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"414503329910d475","type":"ha-entity-config","z":"17235fd954b8a4ef","server":"13f57a0.20e1386","deviceConfig":"d49dd52497676345","name":"Target Color Temperature","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"Target Color Temperature"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":""},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"953bc1e94d6c751a","type":"ha-entity-config","z":"17235fd954b8a4ef","server":"13f57a0.20e1386","deviceConfig":"d49dd52497676345","name":"Actual Brightness","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"Actual Brightness"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":""},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"b1f775782408bbe8","type":"ha-entity-config","z":"17235fd954b8a4ef","server":"13f57a0.20e1386","deviceConfig":"d49dd52497676345","name":"Actual Color Temperature","version":"6","entityType":"sensor","haConfig":[{"property":"name","value":"Actual Color Temperature"},{"property":"icon","value":""},{"property":"entity_picture","value":""},{"property":"entity_category","value":""},{"property":"device_class","value":""},{"property":"unit_of_measurement","value":""},{"property":"state_class","value":"measurement"}],"resend":false,"debugEnabled":false},{"id":"9abf7ceff7fed83d","type":"junction","z":"17235fd954b8a4ef","d":true,"g":"d5d52ec824e220ea","x":2300,"y":6340,"wires":[["a4b3a133132369fd","4b116537efb6fbe7"]]},{"id":"816983ea99944998","type":"group","z":"17235fd954b8a4ef","name":"Verify if Virtual entity exist and create","style":{"label":true},"nodes":["16c37db5d29c4ff1","948fd28cb64bab42","c2d7605cc605ceb7","1b624417d7ead72f","6ca2fff3c007978e"],"x":654,"y":19,"w":1292,"h":82},{"id":"43cab6c94723c42b","type":"group","z":"17235fd954b8a4ef","name":"Clear the entities data.","style":{"label":true},"nodes":["6c477adeda78bf1a","c7d65ea5adf38a95","f35153c3b6528861"],"x":664,"y":219,"w":752,"h":82},{"id":"5b69f11fbb1649ca","type":"group","z":"17235fd954b8a4ef","name":"Reads the entities data","style":{"label":true},"nodes":["3b640ff3fb6bf352","4b2fd9de87915524","9cd5822b4c02e80b"],"x":664,"y":319,"w":752,"h":82},{"id":"e4c88bf6451774c7","type":"group","z":"17235fd954b8a4ef","name":"Entities","style":{"label":true},"nodes":["4a56570c049afcd9","860dd78f2856f92a","36de1eee2a0690e5","b3f005c7e3491eb9","eef9ee6c343310a6","3c572e66698f0d6c","4d6234123db4bf85","544b0a522c143f1a","546372e614f7ffbe","6ef49ceb8e619a60","535d59d7498d285a","3a6dc02a0d3e3b61"],"x":1704,"y":119,"w":512,"h":622},{"id":"fede2d2cc6757096","type":"group","z":"17235fd954b8a4ef","name":"Sleep Mode","style":{"label":true},"nodes":["78c7c6cd7de81881","86421df578bb3bd9","e905e44bd1431eb3","a0eb7548877048bf","91db1aef9fdaea54","6e89a4ef9a17f8c7","737c739f16fcbd2b","c91f5c8567840caf","c769a08f285a40f2","19c2a17840770268","8ccb1542fa2e9408"],"x":154,"y":1699,"w":1682,"h":182},{"id":"732877e34138818a","type":"group","z":"17235fd954b8a4ef","name":"Away Mode","style":{"label":true},"nodes":["a6da46eb05f03928","b2ac6c2139a63c96","049ed69ee8b2b874","85107b83ba7ebbb5","4107bd4a4ea78d1d","41693e3a9b6aa652","a8dba29bcb053abb","0c28c1adfde16256","5659d219e102b8f0","e90a3c9cf2063030"],"x":74,"y":2019,"w":1732,"h":102},{"id":"eeed2225d908a87a","type":"group","z":"17235fd954b8a4ef","name":"Flow Variables","style":{"label":true},"nodes":["8a3ee2db627f2370","392a697b4634d075"],"x":664,"y":119,"w":532,"h":82},{"id":"9f91a26760260398","type":"group","z":"17235fd954b8a4ef","name":"Store Entity Ids and states","style":{"label":true},"nodes":["3f3e2e65abba99e5","2e2946a360890fde","53db8cb2722211d6"],"x":654,"y":431.5,"w":522,"h":97},{"id":"653fd4888fcfeedb","type":"group","z":"17235fd954b8a4ef","name":"Circadian Engine","style":{"label":true},"nodes":["f2b84cc211e3c63e","02e9197abdcebf7c","613dec438decd9f4","82256c34d63ad7db","9dbc78bb3b2f520d","badfdfc67767cdc3","3daa577d4d18ab48","5aa52179fd32a01d","f67e2c6c0e8ddfb0","e1ba7a4aca68c591","1a6c5f6fd683d681","0ef52fcd61de7c97","b15848cd381d1466","93ed5d3ad882290c","8a3835c0d47d9080","c3db95e336b3378b","4da16e8d9be5f23f","889fe11ed2215693","65290ebd3572836b","2ddce62d8991da40","335da76e1bf98584","c3448f5c8628ab4d","b5f002066e3d1755","4693a5d8a346a1bb"],"x":-6,"y":2279,"w":2292,"h":1528},{"id":"b023bab5313290a0","type":"group","z":"17235fd954b8a4ef","name":"4 - Master OFF->ON or ON->OFF","style":{"label":true},"nodes":["7ba086d48ad49347","b1a399dd9a782e04","c0a8e0923515ec4d","0fd6bb07223c6a2a","4b753819ac060a4f","6b64a04dc7ae0b0c","5ac08d6af5dd69eb","d27ceeff2ee5c378","a5bcef381e5c9e24","14abb9be49e59fe4","63d09e4d1e649378","5144f2287f40f423","977dc83a14e2ee04","550ebeab27b6da01","ab42e19ba0cb10ec","cbecd026218cc07a","da4178657dbdb6d4","bd070b659deca28e","6af2c5c9d6b7eddd","858b2c12bfdd913e","531ecac57731df3d","099fbd4e26a948c5","7bbfab46332b92da","581f9497494c76e1","7b47d2f8be0d0cc1","97f296a5c9b75845","73095b9e180b32d7","1615d3372b3f2942","ed9c0bf832746a2f","cac3beb9cc0a2722","590630caa2e8a456","b320cac4dbf8485d","808d56f095f8e52d","9ae84e042bf3d9e8","15343c9e55490efb","97efd3a6310e0fb2","6677f5ea2efcd6e8"],"x":104,"y":4279,"w":1932,"h":582},{"id":"6e2df05fdc655e13","type":"group","z":"17235fd954b8a4ef","name":"2 - Lights OFF->ON or ON->OFF","style":{"label":true},"nodes":["c15158b3608924c5","873a1ec4e4ad0bec","7004b343fbe31735","22934183a3a274c5","6b3191f2a8cd3d95","bcada5dfacde51bf","bd768ff1ee775485","546eef753619bb58","32e9f59a4099b50b","e3dd3d38fc21b010","148e27949a2798da","25d4ff9de7824cdc","5df99d44dd4e97c2","94e69538987cdb84","cbca7b8cf57c2f0e","6d956d07b6ea84cf","0b2b2c6a0dd6e83f","68746d4f9e85d8b3","4c15b969809d22f4","68b9ccc0a12ba5b7","d209f51ec19b31f7","04f2976e6082af1f","896a3e4fb667937a","11953829a3eb3833","bcfa4ee23f68860b","33c07c6e7d56f001","8b8db91fd928a1f8","46094a6f57505f94","04296cb54b9393cd","76d5749a80e5d699","5bf6c42ff0644f1d","eae53b9c06a9e9c3","cafbdb2efec89092","f3dc391c2266e9f0","244cd3a64a2f8b3b","30acb4e7d9b2412f","34c1e1855b5c7e5c","fbe5034076d3c527","7998cfe76c679348","3442a91b6882e839","9e5e7c330b482df2","73aefa11b41d70cb","f1ac28ea71dc852a","1a743ba9715a437b","73c44de5a8e3a347","713aa0b3a902a1b0","cde4218df76352a1","e46554afaa5af226","9a25684ca272c455","defc832bd6fe5f47"],"x":94,"y":5319,"w":2592,"h":442},{"id":"d5d52ec824e220ea","type":"group","z":"17235fd954b8a4ef","name":"5 - Circadian Iterator","style":{"label":true},"nodes":["25265aaa55f53869","690c9b43757699dc","32b08e433f3d4f05","fb577f254dda4644","0a72b0030ccf0463","f3f5878f2e1f0b6b","d0fad2f1c9909684","cc2640443caf8759","b3ea0950cef193c5","5ecc81485aecfd8d","7cfde633758bae64","af731d8c3ab4784e","b5ab11b373813ce6","9abf7ceff7fed83d","c5357ecdac306879","8d1d875e18da7317","f6edebf50ad2bdbe","6b35536846756b9e","ea96c167f18e9a34","a4b3a133132369fd","cf2ee3f17dadba1a","7898d4f4710c2e9a","94407f156d7711dc","8e3d192a358e59e4","03de50ac8e192998","fb630b0dad4c978d","a18ee8892df7f9de","4307ce8d1f2655d2","3cf525fd5f502004","f279ac64cd08075c","afa87d0fd6327273","d0a9f95749107c4a","58c7086d51ea0d1f","28d8fbbce125d262","4b116537efb6fbe7"],"x":14,"y":6199,"w":3412,"h":442},{"id":"742c3cdbda580485","type":"group","z":"17235fd954b8a4ef","name":"Cancel Circadian if manual changes are made","style":{"label":true},"nodes":["26a8d3df1fa61795","2ecf9f0a06126687","07d6a84b85fd4afb","66a9e23f76f84fc6","f5c2f9b0d81bf07c","7049f2d6c7118f37","2dc4a4015566b66e","144ce447d4d48576","9cc6cebd572d1f8e","c400757161d62235","10c78983cc115b11","6e80d2a0ada74480","48eb39bb1c190cf5","e81f85208082e4c2","0a795324376ea08d","9f7e8028dafead94","a67e63c9dc9279a5","3aadd3e8d5200ff8","f2dd4d9a5e720477"],"x":154,"y":1039,"w":2312,"h":202},{"id":"7af13a48ec044dbb","type":"group","z":"17235fd954b8a4ef","name":"3 - Update Lights when Master changes","style":{"label":true},"nodes":["23db8d1fbb9e8486","b099cb2a1fba359e","0ef1077d7fe7304f","8fd26a547eddc5f1","28565d9e7624a6bf","54e188e09ec8c881","56ba0b558207a643","5cb7c68f74497355","46d46bf0600cf6df","8f1e14bc5f1de332","99359e00de42194c","0d4d00ee411b4bcb","96119fe07c82d039","f197c0cb5c53c338","49a336f3d4bf2448","2f0ddfda87ca5792","f7af962b48b5e9a8","216ddf4e879ea40f"],"x":114,"y":4939,"w":1712,"h":282},{"id":"dcfb9f8cdf58735d","type":"group","z":"17235fd954b8a4ef","name":"1 - Update Master when Lights changes","style":{"label":true},"nodes":["2d1d545cfd877983","baab70ffa30b0696","f88fa09ab7ec68d8","485b3da57dd2cfbc","a9ab9483abc881eb","2c8edf118c754fc0","c727e429035ba289","f3a387ab6878a6af","a86cde33f8fa2147","07c0a37bc5f96ef0","62e9a19e11f1a8aa","3a3ad6e0b456c029","f87127beefed6dcd","646411b1237fce07","f0d93ee93785e4ed"],"x":94,"y":5919,"w":2042,"h":202},{"id":"53ccd140d3a481cb","type":"group","z":"17235fd954b8a4ef","name":"Change the mode when changing the default mode if master is OFF","style":{"label":true},"nodes":["02dc5561b78f845e","6ec442af408e115c","b7cce059f10f4d29"],"x":34,"y":679,"w":732,"h":82},{"id":"9438416fc73afbc1","type":"group","z":"17235fd954b8a4ef","name":"Virtual Light Change","style":{"label":true},"nodes":["18658326fa88a17f","7c5fbacc154d0a4f","bd1435f828ea712f"],"x":54,"y":39,"w":292,"h":202},{"id":"c90ca113dabe3a16","type":"group","z":"17235fd954b8a4ef","name":"Default to Circadian when turn off from manual","style":{"label":true},"nodes":["195bcb4ad089d67c","f6fc01cb39e99c13","f65d5cc27258926a","c530d25cda7de864","b748aba68f01e645","8ff1deafec7928d9","81f198c1d5cda5c5","bc314d6deae86b0a","89e14c8ce254a525","ad4b627f849c97a4"],"x":184,"y":1331.5,"w":1442,"h":209.5},{"id":"b551f315ef6cd88d","type":"group","z":"17235fd954b8a4ef","name":"5 - Circadian Iterator v2","style":{"label":true},"nodes":["97cbe4ed666b1f33","b2a68478794f5f33","be6f824ac51adc7f","8e30de3ab21f4d8f","dedf21475c587039","66f9791ac0144bca","b05ede22815e183c","c29ed1f47c19d04d","fd1a94bc8c042f3d","3fcb833f1a7551e5","e6a6f77b07896bd1","6de463af3c854eb4","23a4d5727252c8ab","db2b23f71cb305f4","5e79cf8b2f06fe22","d92593b2c5e35a58","4efcdf85317e5850","7347fe3a3231db47","7b483059f19a990f","f66a8bf1928a2558","25ec553cc5e9e4b4","0f34dadebf74da79","24b141372faac09e","253bb55e74c901b0","90f30acd89217858","c05ceb49209fcc00","1c86d16780eace5d"],"x":134,"y":6679,"w":2932,"h":462},{"id":"7cec7f7c5943f0df","type":"group","z":"17235fd954b8a4ef","name":"5 - Circadian Iterator v3","style":{"label":true},"nodes":["4ae645a2990e64a3","3b632ad85517798c","ddfd95d71484f9e8","ad83e48c2bbfded8","84d6cdeb14b8d7de","fc1e211685d2beb5","a30683e18a293600","8eeb9f85ed7c4c27","f580c7e420e2da92","86281b6b94d26b89","7d93a8d768a4b1e0","b531a3eff1ec4cc5","0372a39377d292f7","0ce251e063bbc2cd","5753f673652f587b","04c53b91266d9a8b","64dad059753cbb6d","8312e61b37c6d0da","ca2d3536f67421c2","970e941c5cc734d5","3bb6eb64a736907a","b25dab15760e30d9","bd8d83f3befe5c99","c6c6432f611c590d","352bb254bc2605b9","ba20e4edc4e7678c","4f78a7155deb5e40","f09823b43e6033b3"],"x":154,"y":7199,"w":2932,"h":462},{"id":"9dbc78bb3b2f520d","type":"group","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"Calculate Brightness","style":{"label":true},"nodes":["bbf1398e19a41988","39b40a8dc8e2e77b","7d4bd1dc314c9878","90dcb1282441d831","1df7f8a010b89943","a4561eb6b1e2b76b"],"x":494,"y":2559,"w":732,"h":202},{"id":"badfdfc67767cdc3","type":"group","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"Calculates Color Temperature","style":{"label":true},"nodes":["c2e1a6076f127ff6","e9cf6b441fc33fe6","b9a127809a6f64e6","190b54d9e364cf3d","deea35732313fdc7","0955f6c1c967ff51","b8334247a587b197"],"x":494,"y":2779,"w":732,"h":382},{"id":"1a6c5f6fd683d681","type":"group","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"Configure min and max Values","style":{"label":true},"nodes":["c6c79c3bb3d1e532","beef17992f745833","ed08f08ac897f2ad","fa37d23b21269ed4","2591cbed8b1c95e7","084524566a0b5d2d","8a551b93f977ec13","5337c55931fd18aa","450d1c8b444bfb81","42752ed0cb1d3246"],"x":394,"y":3519,"w":832,"h":262},{"id":"0ef52fcd61de7c97","type":"group","z":"17235fd954b8a4ef","g":"653fd4888fcfeedb","name":"Configure max and min values","style":{"label":true},"nodes":["1733952f3c845a8e","d13fb54244c298d7","f2d63eb59e4aaac9","b26ae447a723d3c0","cfa347dac317db45","951e4a4b211a983d","b8c9151c63b5ae3a","3bbe951e04711d8a","7fa8a6ff3c9268c4","f4ce218701082ad4"],"x":394,"y":3219,"w":832,"h":262},{"id":"13f57a0.20e1386","type":"server","name":"Home Assistant","version":5,"addon":true,"rejectUnauthorizedCerts":true,"ha_boolean":"y|yes|true|on|home|open","connectionDelay":true,"cacheJson":true,"heartbeat":false,"heartbeatInterval":"30","areaSelector":"friendlyName","deviceSelector":"friendlyName","entitySelector":"friendlyName","statusSeparator":"at: ","statusYear":"hidden","statusMonth":"short","statusDay":"numeric","statusHourCycle":"h23","statusTimeFormat":"h:m","enableGlobalContextStore":true},{"id":"26f98e1b.bd1812","type":"position-config","name":"","isValide":"true","longitude":"0","latitude":"0","angleType":"deg","timeZoneOffset":99,"timeZoneDST":0,"stateTimeFormat":"3","stateDateFormat":"12"},{"id":"93c6d37636351e09","type":"inject","z":"867d67403579a9f5","g":"228101d204d1d857","name":"Clear Entities Storaged","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"clear","payloadType":"str","x":540,"y":460,"wires":[["9adac5616ad1ce7b"]]},{"id":"5c2394da2b512958","type":"inject","z":"867d67403579a9f5","g":"228101d204d1d857","name":"Read Entities Storaged","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"read","payloadType":"str","x":540,"y":500,"wires":[["9adac5616ad1ce7b"]]},{"id":"9adac5616ad1ce7b","type":"subflow:17235fd954b8a4ef","z":"867d67403579a9f5","g":"228101d204d1d857","name":"","env":[{"name":"Name","value":"bedroom2_ceiling","type":"str"}],"x":760,"y":540,"wires":[["20ec4524814f6fda"]]},{"id":"20ec4524814f6fda","type":"debug","z":"867d67403579a9f5","g":"228101d204d1d857","name":"debug 45","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":980,"y":540,"wires":[]},{"id":"1182eda255b746a4","type":"server-state-changed","z":"867d67403579a9f5","g":"228101d204d1d857","name":"","server":"13f57a0.20e1386","version":6,"outputs":1,"exposeAsEntityConfig":"","entities":{"entity":["light.bedroom_2_1"],"substring":[],"regex":[]},"outputInitially":true,"stateType":"str","ifState":"","ifStateType":"str","ifStateOperator":"is","outputOnlyOnStateChange":false,"for":"0","forType":"num","forUnits":"minutes","ignorePrevStateNull":false,"ignorePrevStateUnknown":false,"ignorePrevStateUnavailable":false,"ignoreCurrentStateUnknown":false,"ignoreCurrentStateUnavailable":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"eventData"},{"property":"topic","propertyType":"msg","value":"","valueType":"triggerId"}],"x":280,"y":540,"wires":[["9adac5616ad1ce7b"]]}]
